
smi-lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000173c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080018c4  080018c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001918  08001918  00011918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08001920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
  7 .bss          00000074  2000006c  2000006c  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000e0  200000e0  0002006c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000031f9  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ac1  00000000  00000000  00023295  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000250  00000000  00000000  00023d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  00023fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001488  00000000  00000000  00024160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000cf2  00000000  00000000  000255e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000262da  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000870  00000000  00000000  00026358  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00026bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018ac 	.word	0x080018ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080018ac 	.word	0x080018ac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <parseCommand>:
#include "lcd.h"

static char allReceivedBytes[16];
static unsigned int bytesToShow = 0;

void parseCommand(char* receivedBytes){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	static int value;
	char command = *receivedBytes;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	72fb      	strb	r3, [r7, #11]
	receivedBytes++;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3301      	adds	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
	char parameter = *receivedBytes;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	72bb      	strb	r3, [r7, #10]
	receivedBytes++;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3301      	adds	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
	char checksum = *receivedBytes;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	727b      	strb	r3, [r7, #9]
	value = (int)command + (int)parameter + (int)checksum;
 80009d2:	7afa      	ldrb	r2, [r7, #11]
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	441a      	add	r2, r3
 80009d8:	7a7b      	ldrb	r3, [r7, #9]
 80009da:	4413      	add	r3, r2
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <parseCommand+0xb8>)
 80009de:	6013      	str	r3, [r2, #0]
	if(value % 256 == 0){
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <parseCommand+0xb8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d138      	bne.n	8000a5c <parseCommand+0xb0>
		if(command == 0x41){
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	2b41      	cmp	r3, #65	; 0x41
 80009ee:	d10b      	bne.n	8000a08 <parseCommand+0x5c>
		   if(parameter == 0x30) {
 80009f0:	7abb      	ldrb	r3, [r7, #10]
 80009f2:	2b30      	cmp	r3, #48	; 0x30
 80009f4:	d102      	bne.n	80009fc <parseCommand+0x50>
			   turnOffTheLed();
 80009f6:	f000 fb35 	bl	8001064 <turnOffTheLed>
			}
			goToSecondLine();
			lcd_write_characters(allReceivedBytes);
		}
	}
}
 80009fa:	e02f      	b.n	8000a5c <parseCommand+0xb0>
		   } else if (parameter == 0x31) {
 80009fc:	7abb      	ldrb	r3, [r7, #10]
 80009fe:	2b31      	cmp	r3, #49	; 0x31
 8000a00:	d12c      	bne.n	8000a5c <parseCommand+0xb0>
			   turnOnTheLed();
 8000a02:	f000 fb1f 	bl	8001044 <turnOnTheLed>
}
 8000a06:	e029      	b.n	8000a5c <parseCommand+0xb0>
		} else if (command == 0x42){
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	2b42      	cmp	r3, #66	; 0x42
 8000a0c:	d10d      	bne.n	8000a2a <parseCommand+0x7e>
			goToSecondLine();
 8000a0e:	f000 f9f1 	bl	8000df4 <goToSecondLine>
			for(int i = 0; i < 16; i++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e004      	b.n	8000a22 <parseCommand+0x76>
				lcd_write_blank_space();
 8000a18:	f000 fac2 	bl	8000fa0 <lcd_write_blank_space>
			for(int i = 0; i < 16; i++){
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	ddf7      	ble.n	8000a18 <parseCommand+0x6c>
}
 8000a28:	e018      	b.n	8000a5c <parseCommand+0xb0>
		} else if(command == 0x43) {
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	2b43      	cmp	r3, #67	; 0x43
 8000a2e:	d115      	bne.n	8000a5c <parseCommand+0xb0>
			allReceivedBytes[bytesToShow] = parameter;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <parseCommand+0xbc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	490d      	ldr	r1, [pc, #52]	; (8000a6c <parseCommand+0xc0>)
 8000a36:	7aba      	ldrb	r2, [r7, #10]
 8000a38:	54ca      	strb	r2, [r1, r3]
			bytesToShow++;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <parseCommand+0xbc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <parseCommand+0xbc>)
 8000a42:	6013      	str	r3, [r2, #0]
			if(16 <= bytesToShow){
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <parseCommand+0xbc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d902      	bls.n	8000a52 <parseCommand+0xa6>
				bytesToShow = 0;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <parseCommand+0xbc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
			goToSecondLine();
 8000a52:	f000 f9cf 	bl	8000df4 <goToSecondLine>
			lcd_write_characters(allReceivedBytes);
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <parseCommand+0xc0>)
 8000a58:	f000 f9f4 	bl	8000e44 <lcd_write_characters>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000009c 	.word	0x2000009c
 8000a68:	20000098 	.word	0x20000098
 8000a6c:	20000088 	.word	0x20000088

08000a70 <charToBinary>:
#define NUMBER8				"00111000"
#define NUMBER9				"00111001"

/* Private functions */

char* charToBinary(char c){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	char* binaryForm;
	binaryForm = (char*)malloc(8);
 8000a7a:	2008      	movs	r0, #8
 8000a7c:	f000 fe90 	bl	80017a0 <malloc>
 8000a80:	4603      	mov	r3, r0
 8000a82:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < 8; ++i) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e01b      	b.n	8000ac2 <charToBinary+0x52>
		if ((c & (1 << i)) == 0) {
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	fa42 f303 	asr.w	r3, r2, r3
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d108      	bne.n	8000aac <charToBinary+0x3c>
			binaryForm[7 - i] = '0';
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1c3 0307 	rsb	r3, r3, #7
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	2230      	movs	r2, #48	; 0x30
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e007      	b.n	8000abc <charToBinary+0x4c>
		} else {
			binaryForm[7 - i] = '1';
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2231      	movs	r2, #49	; 0x31
 8000aba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; ++i) {
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	dde0      	ble.n	8000a8a <charToBinary+0x1a>
		}
	}
	binaryForm[i] = '\0';
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	return (char*)binaryForm;
 8000ad2:	68bb      	ldr	r3, [r7, #8]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <LCD_pre_Send_Command>:

void LCD_pre_Send_Command(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	set_gpio_output(LCD_PORT, LCD_RS, 0); //Command Mode
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2045      	movs	r0, #69	; 0x45
 8000ae6:	f000 fdd1 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT, LCD_RW, 0); //R/W to 0
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	2045      	movs	r0, #69	; 0x45
 8000af0:	f000 fdcc 	bl	800168c <set_gpio_output>
	delay_cycles(12000);
 8000af4:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000af8:	f000 fd4c 	bl	8001594 <delay_cycles>
	set_gpio_output(LCD_PORT, LCD_EN, 1); //Set Enable to 1
 8000afc:	2201      	movs	r2, #1
 8000afe:	2102      	movs	r1, #2
 8000b00:	2045      	movs	r0, #69	; 0x45
 8000b02:	f000 fdc3 	bl	800168c <set_gpio_output>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <LCD_post_Send>:

void LCD_post_Send(){
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
	set_gpio_output(LCD_PORT, LCD_EN, 0); //Set Enable to 0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	2045      	movs	r0, #69	; 0x45
 8000b14:	f000 fdba 	bl	800168c <set_gpio_output>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <LCD_pre_Write_Command>:

void LCD_pre_Write_Command(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	set_gpio_output(LCD_PORT, LCD_RS, 1); //Data Mode
 8000b20:	2201      	movs	r2, #1
 8000b22:	2100      	movs	r1, #0
 8000b24:	2045      	movs	r0, #69	; 0x45
 8000b26:	f000 fdb1 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT, LCD_RW, 0); //R/W to 0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2045      	movs	r0, #69	; 0x45
 8000b30:	f000 fdac 	bl	800168c <set_gpio_output>
	delay_cycles(12000);
 8000b34:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000b38:	f000 fd2c 	bl	8001594 <delay_cycles>
	set_gpio_output(LCD_PORT, LCD_EN, 1); //Set Enable
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	2045      	movs	r0, #69	; 0x45
 8000b42:	f000 fda3 	bl	800168c <set_gpio_output>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <LCD_write_Instruction>:

void LCD_write_Instruction(char* instruction){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	// write instruction on 8 bit data bus
	set_gpio_output(LCD_PORT_D4_D7, D7, (int)instruction[0]);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	2042      	movs	r0, #66	; 0x42
 8000b5c:	f000 fd96 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D4_D7, D6, (int)instruction[1]);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	2102      	movs	r1, #2
 8000b6a:	2042      	movs	r0, #66	; 0x42
 8000b6c:	f000 fd8e 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D4_D7, D5, (int)instruction[2]);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3302      	adds	r3, #2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2042      	movs	r0, #66	; 0x42
 8000b7c:	f000 fd86 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D4_D7, D4, (int)instruction[3]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3303      	adds	r3, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2042      	movs	r0, #66	; 0x42
 8000b8c:	f000 fd7e 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D3, (int)instruction[4]);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3304      	adds	r3, #4
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	210a      	movs	r1, #10
 8000b9a:	2045      	movs	r0, #69	; 0x45
 8000b9c:	f000 fd76 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D2, (int)instruction[5]);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3305      	adds	r3, #5
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	2109      	movs	r1, #9
 8000baa:	2045      	movs	r0, #69	; 0x45
 8000bac:	f000 fd6e 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D1, (int)instruction[6]);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2108      	movs	r1, #8
 8000bba:	2045      	movs	r0, #69	; 0x45
 8000bbc:	f000 fd66 	bl	800168c <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D0, (int)instruction[7]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3307      	adds	r3, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2107      	movs	r1, #7
 8000bca:	2045      	movs	r0, #69	; 0x45
 8000bcc:	f000 fd5e 	bl	800168c <set_gpio_output>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <lcd_init>:

void lcd_init(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	// enable clock
	RCC->AHB1ENR |= BIT4;
 8000bdc:	4a5b      	ldr	r2, [pc, #364]	; (8000d4c <lcd_init+0x174>)
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <lcd_init+0x174>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= BIT1;
 8000be8:	4a58      	ldr	r2, [pc, #352]	; (8000d4c <lcd_init+0x174>)
 8000bea:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <lcd_init+0x174>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= BIT0;
 8000bf4:	4a55      	ldr	r2, [pc, #340]	; (8000d4c <lcd_init+0x174>)
 8000bf6:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <lcd_init+0x174>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30

	// set GPIO modes
	set_gpio_mode(LCD_PORT, LCD_RS, GPIO_OUTPUT_MODE);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2100      	movs	r1, #0
 8000c04:	2045      	movs	r0, #69	; 0x45
 8000c06:	f000 fcd9 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT, LCD_RW, GPIO_OUTPUT_MODE);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2045      	movs	r0, #69	; 0x45
 8000c10:	f000 fcd4 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT, LCD_EN, GPIO_OUTPUT_MODE);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2102      	movs	r1, #2
 8000c18:	2045      	movs	r0, #69	; 0x45
 8000c1a:	f000 fccf 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D0, GPIO_OUTPUT_MODE);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2107      	movs	r1, #7
 8000c22:	2045      	movs	r0, #69	; 0x45
 8000c24:	f000 fcca 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D1, GPIO_OUTPUT_MODE);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	2045      	movs	r0, #69	; 0x45
 8000c2e:	f000 fcc5 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D2, GPIO_OUTPUT_MODE);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2109      	movs	r1, #9
 8000c36:	2045      	movs	r0, #69	; 0x45
 8000c38:	f000 fcc0 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D3, GPIO_OUTPUT_MODE);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	210a      	movs	r1, #10
 8000c40:	2045      	movs	r0, #69	; 0x45
 8000c42:	f000 fcbb 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D4, GPIO_OUTPUT_MODE);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2042      	movs	r0, #66	; 0x42
 8000c4c:	f000 fcb6 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D5, GPIO_OUTPUT_MODE);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	2042      	movs	r0, #66	; 0x42
 8000c56:	f000 fcb1 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D6, GPIO_OUTPUT_MODE);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	2042      	movs	r0, #66	; 0x42
 8000c60:	f000 fcac 	bl	80015bc <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D7, GPIO_OUTPUT_MODE);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2103      	movs	r1, #3
 8000c68:	2042      	movs	r0, #66	; 0x42
 8000c6a:	f000 fca7 	bl	80015bc <set_gpio_mode>
	//Next command set the display
	LCD_pre_Send_Command();
 8000c6e:	f7ff ff35 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <lcd_init+0x178>)
 8000c74:	4a37      	ldr	r2, [pc, #220]	; (8000d54 <lcd_init+0x17c>)
 8000c76:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <lcd_init+0x178>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff64 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000c82:	f7ff ff42 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Send_Command();
 8000c86:	f7ff ff29 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <lcd_init+0x178>)
 8000c8c:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <lcd_init+0x17c>)
 8000c8e:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <lcd_init+0x178>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff58 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000c9a:	f7ff ff36 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Send_Command();
 8000c9e:	f7ff ff1d 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <lcd_init+0x178>)
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <lcd_init+0x17c>)
 8000ca6:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <lcd_init+0x178>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff4c 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000cb2:	f7ff ff2a 	bl	8000b0a <LCD_post_Send>

	//Next command display off
	LCD_pre_Send_Command();
 8000cb6:	f7ff ff11 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00001000";
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <lcd_init+0x178>)
 8000cbc:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <lcd_init+0x180>)
 8000cbe:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <lcd_init+0x178>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff40 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000cca:	f7ff ff1e 	bl	8000b0a <LCD_post_Send>

	//Next command clear display
	LCD_pre_Send_Command();
 8000cce:	f7ff ff05 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00000001";
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <lcd_init+0x178>)
 8000cd4:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <lcd_init+0x184>)
 8000cd6:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <lcd_init+0x178>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff34 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000ce2:	f7ff ff12 	bl	8000b0a <LCD_post_Send>

	//Next command entry mode set
	LCD_pre_Send_Command();
 8000ce6:	f7ff fef9 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00000110";
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <lcd_init+0x178>)
 8000cec:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <lcd_init+0x188>)
 8000cee:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <lcd_init+0x178>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff28 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000cfa:	f7ff ff06 	bl	8000b0a <LCD_post_Send>

	//Next command set function
	LCD_pre_Send_Command();
 8000cfe:	f7ff feed 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <lcd_init+0x178>)
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <lcd_init+0x17c>)
 8000d06:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <lcd_init+0x178>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff1c 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000d12:	f7ff fefa 	bl	8000b0a <LCD_post_Send>

	//Next command display on
	LCD_pre_Send_Command();
 8000d16:	f7ff fee1 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00001110";
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <lcd_init+0x178>)
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <lcd_init+0x18c>)
 8000d1e:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <lcd_init+0x178>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff10 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000d2a:	f7ff feee 	bl	8000b0a <LCD_post_Send>

	//Next command entry mode set
	LCD_pre_Send_Command();
 8000d2e:	f7ff fed5 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00000110";
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <lcd_init+0x178>)
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <lcd_init+0x188>)
 8000d36:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <lcd_init+0x178>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff04 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000d42:	f7ff fee2 	bl	8000b0a <LCD_post_Send>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	200000a0 	.word	0x200000a0
 8000d54:	080018c4 	.word	0x080018c4
 8000d58:	080018d0 	.word	0x080018d0
 8000d5c:	080018dc 	.word	0x080018dc
 8000d60:	080018e8 	.word	0x080018e8
 8000d64:	080018f4 	.word	0x080018f4

08000d68 <lcd_write_first_row>:

void lcd_write_first_row(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	LCD_pre_Write_Command();
 8000d6c:	f7ff fed6 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('F'));
 8000d70:	2046      	movs	r0, #70	; 0x46
 8000d72:	f7ff fe7d 	bl	8000a70 <charToBinary>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fee6 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000d7e:	f7ff fec4 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000d82:	f7ff fecb 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('F'));
 8000d86:	2046      	movs	r0, #70	; 0x46
 8000d88:	f7ff fe72 	bl	8000a70 <charToBinary>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fedb 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000d94:	f7ff feb9 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000d98:	f7ff fec0 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('C'));
 8000d9c:	2043      	movs	r0, #67	; 0x43
 8000d9e:	f7ff fe67 	bl	8000a70 <charToBinary>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fed0 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000daa:	f7ff feae 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000dae:	f7ff feb5 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('J'));
 8000db2:	204a      	movs	r0, #74	; 0x4a
 8000db4:	f7ff fe5c 	bl	8000a70 <charToBinary>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fec5 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000dc0:	f7ff fea3 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000dc4:	f7ff feaa 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('H'));
 8000dc8:	2048      	movs	r0, #72	; 0x48
 8000dca:	f7ff fe51 	bl	8000a70 <charToBinary>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff feba 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000dd6:	f7ff fe98 	bl	8000b0a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000dda:	f7ff fe9f 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('_'));
 8000dde:	205f      	movs	r0, #95	; 0x5f
 8000de0:	f7ff fe46 	bl	8000a70 <charToBinary>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff feaf 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000dec:	f7ff fe8d 	bl	8000b0a <LCD_post_Send>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <goToSecondLine>:

void goToSecondLine(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	// go to second line
	LCD_pre_Send_Command();
 8000df8:	f7ff fe70 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "11000000";
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <goToSecondLine+0x20>)
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <goToSecondLine+0x24>)
 8000e00:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <goToSecondLine+0x20>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe9f 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000e0c:	f7ff fe7d 	bl	8000b0a <LCD_post_Send>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000a0 	.word	0x200000a0
 8000e18:	08001900 	.word	0x08001900

08000e1c <goToFirstLine>:

void goToFirstLine(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	// go to first line
	LCD_pre_Send_Command();
 8000e20:	f7ff fe5c 	bl	8000adc <LCD_pre_Send_Command>
	INSTRUCTION = "00000010";
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <goToFirstLine+0x20>)
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <goToFirstLine+0x24>)
 8000e28:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <goToFirstLine+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fe8b 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000e34:	f7ff fe69 	bl	8000b0a <LCD_post_Send>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000a0 	.word	0x200000a0
 8000e40:	0800190c 	.word	0x0800190c

08000e44 <lcd_write_characters>:

void lcd_write_characters(char* characters){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(characters); i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e011      	b.n	8000e76 <lcd_write_characters+0x32>
		LCD_pre_Write_Command();
 8000e52:	f7ff fe63 	bl	8000b1c <LCD_pre_Write_Command>
		LCD_write_Instruction(charToBinary(characters[i]));
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fe06 	bl	8000a70 <charToBinary>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe6f 	bl	8000b4a <LCD_write_Instruction>
		LCD_post_Send();
 8000e6c:	f7ff fe4d 	bl	8000b0a <LCD_post_Send>
	for (int i = 0; i < strlen(characters); i++) {
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff f9a6 	bl	80001c8 <strlen>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8e6      	bhi.n	8000e52 <lcd_write_characters+0xe>
	}
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <lcd_write_time>:

void lcd_write_time(int currentTime){
 8000e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e90:	b08b      	sub	sp, #44	; 0x2c
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	goToFirstLine();
 8000e96:	f7ff ffc1 	bl	8000e1c <goToFirstLine>
	lcd_write_first_row();
 8000e9a:	f7ff ff65 	bl	8000d68 <lcd_write_first_row>
	// Count digits in number of seconds
	int m = currentTime;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
	int digit = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
	while (m) {
 8000ea6:	e00a      	b.n	8000ebe <lcd_write_time+0x32>
		digit++;
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
		m /= 10;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	4a3a      	ldr	r2, [pc, #232]	; (8000f9c <lcd_write_time+0x110>)
 8000eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb6:	1092      	asrs	r2, r2, #2
 8000eb8:	17db      	asrs	r3, r3, #31
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
	while (m) {
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f1      	bne.n	8000ea8 <lcd_write_time+0x1c>
	}
	// Declare char array for result
	char* arr;
	// Declare duplicate char array
	char arr1[digit];
 8000ec4:	6a39      	ldr	r1, [r7, #32]
 8000ec6:	466b      	mov	r3, sp
 8000ec8:	461e      	mov	r6, r3
 8000eca:	1e4b      	subs	r3, r1, #1
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000eda:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000ede:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	00dd      	lsls	r5, r3, #3
 8000eec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000ef0:	00d4      	lsls	r4, r2, #3
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	3307      	adds	r3, #7
 8000ef6:	08db      	lsrs	r3, r3, #3
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	ebad 0d03 	sub.w	sp, sp, r3
 8000efe:	466b      	mov	r3, sp
 8000f00:	3300      	adds	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
	// Memory allocation of array
	arr = (char*)malloc(digit);
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fc4a 	bl	80017a0 <malloc>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60fb      	str	r3, [r7, #12]
	// Separating integer into digits and
	// accommodate it to character array
	int index = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
	while (currentTime) {
 8000f14:	e01e      	b.n	8000f54 <lcd_write_time+0xc8>
		// Separate last digit from
		// the number and add ASCII
		// value of character '0' is 48
		arr1[++index] = currentTime % 10 + '0';
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <lcd_write_time+0x110>)
 8000f20:	fb83 1302 	smull	r1, r3, r3, r2
 8000f24:	1099      	asrs	r1, r3, #2
 8000f26:	17d3      	asrs	r3, r2, #31
 8000f28:	1ac9      	subs	r1, r1, r3
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	1ad1      	subs	r1, r2, r3
 8000f34:	b2cb      	uxtb	r3, r1
 8000f36:	3330      	adds	r3, #48	; 0x30
 8000f38:	b2d9      	uxtb	r1, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	4413      	add	r3, r2
 8000f40:	460a      	mov	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
		// Truncate the last
		// digit from the number
		currentTime /= 10;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <lcd_write_time+0x110>)
 8000f48:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4c:	1092      	asrs	r2, r2, #2
 8000f4e:	17db      	asrs	r3, r3, #31
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	607b      	str	r3, [r7, #4]
	while (currentTime) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1dd      	bne.n	8000f16 <lcd_write_time+0x8a>
	}
	// Reverse the array for result
	int i;
	for (i = 0; i < index; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	e00b      	b.n	8000f78 <lcd_write_time+0xec>
		arr[i] = arr1[index - i];
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	69f9      	ldr	r1, [r7, #28]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	1a8a      	subs	r2, r1, r2
 8000f6c:	6939      	ldr	r1, [r7, #16]
 8000f6e:	5c8a      	ldrb	r2, [r1, r2]
 8000f70:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < index; i++) {
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbef      	blt.n	8000f60 <lcd_write_time+0xd4>
	}
	// Char array truncate by null
	arr[i] = '\0';
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	lcd_write_characters((char*)arr);
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff ff5a 	bl	8000e44 <lcd_write_characters>
 8000f90:	46b5      	mov	sp, r6
}
 8000f92:	bf00      	nop
 8000f94:	372c      	adds	r7, #44	; 0x2c
 8000f96:	46bd      	mov	sp, r7
 8000f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f9c:	66666667 	.word	0x66666667

08000fa0 <lcd_write_blank_space>:

void lcd_write_blank_space(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	LCD_pre_Write_Command();
 8000fa4:	f7ff fdba 	bl	8000b1c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary(' '));
 8000fa8:	2020      	movs	r0, #32
 8000faa:	f7ff fd61 	bl	8000a70 <charToBinary>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fdca 	bl	8000b4a <LCD_write_Instruction>
	LCD_post_Send();
 8000fb6:	f7ff fda8 	bl	8000b0a <LCD_post_Send>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <configureLEDs>:
#include "macro_utiles.h"
#include "stm32f4xx.h"
#include "led.h"

void configureLEDs(){
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT3;
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <configureLEDs+0x7c>)
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <configureLEDs+0x7c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= BIT24;
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <configureLEDs+0x80>)
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <configureLEDs+0x80>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fda:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT25;
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <configureLEDs+0x80>)
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <configureLEDs+0x80>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT26;
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <configureLEDs+0x80>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <configureLEDs+0x80>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ff2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT27;
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <configureLEDs+0x80>)
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <configureLEDs+0x80>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000ffe:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT28;
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <configureLEDs+0x80>)
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <configureLEDs+0x80>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT29;
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <configureLEDs+0x80>)
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <configureLEDs+0x80>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001016:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT30;
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <configureLEDs+0x80>)
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <configureLEDs+0x80>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001022:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT31;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <configureLEDs+0x80>)
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <configureLEDs+0x80>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40020c00 	.word	0x40020c00

08001044 <turnOnTheLed>:

void turnOnTheLed(){
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	GPIOD->ODR |= LED_VERTE;
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <turnOnTheLed+0x1c>)
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <turnOnTheLed+0x1c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001052:	6153      	str	r3, [r2, #20]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00

08001064 <turnOffTheLed>:

void turnOffTheLed(){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(LED_VERTE);
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <turnOffTheLed+0x1c>)
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <turnOffTheLed+0x1c>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001072:	6153      	str	r3, [r2, #20]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40020c00 	.word	0x40020c00

08001084 <main>:

static volatile uint32_t lastTimeRead = -1;
static volatile uint32_t lastTransmissionNumber = 0;

int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	uart_init_uart();
 8001088:	f000 fa02 	bl	8001490 <uart_init_uart>
	lcd_init();
 800108c:	f7ff fda4 	bl	8000bd8 <lcd_init>
    lcd_write_first_row();
 8001090:	f7ff fe6a 	bl	8000d68 <lcd_write_first_row>
    goToSecondLine();
 8001094:	f7ff feae 	bl	8000df4 <goToSecondLine>
    configureLEDs();
 8001098:	f7ff ff92 	bl	8000fc0 <configureLEDs>
    timer2_init();
 800109c:	f000 f938 	bl	8001310 <timer2_init>

	receivedBytes[0] = 'C';
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <main+0x68>)
 80010a2:	2243      	movs	r2, #67	; 0x43
 80010a4:	701a      	strb	r2, [r3, #0]
	receivedBytes[1] = '0';
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <main+0x68>)
 80010a8:	2230      	movs	r2, #48	; 0x30
 80010aa:	705a      	strb	r2, [r3, #1]
	receivedBytes[2] = 0x8d;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <main+0x68>)
 80010ae:	228d      	movs	r2, #141	; 0x8d
 80010b0:	709a      	strb	r2, [r3, #2]
	receptionComplete = 1;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <main+0x6c>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
		while (!(USART2->SR & BIT7));
		a = USART2->SR;
		USART2->DR = 0xAA;
		volatile int b = USART2->DR;
		// USART2->CR1 &= ~BIT13; // USART Disable*/
		uart_transmit_echo();
 80010b8:	f000 fa36 	bl	8001528 <uart_transmit_echo>

		if(lastTimeRead != second){
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <main+0x70>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <main+0x74>)
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d009      	beq.n	80010dc <main+0x58>
			lastTimeRead = second;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <main+0x74>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <main+0x70>)
 80010d0:	601a      	str	r2, [r3, #0]
			lcd_write_time(lastTimeRead);
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <main+0x70>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fed8 	bl	8000e8c <lcd_write_time>
		}

		if(receptionComplete == 1){
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <main+0x6c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d1e9      	bne.n	80010b8 <main+0x34>
			parseCommand(receivedBytes);
 80010e4:	4801      	ldr	r0, [pc, #4]	; (80010ec <main+0x68>)
 80010e6:	f7ff fc61 	bl	80009ac <parseCommand>
		uart_transmit_echo();
 80010ea:	e7e5      	b.n	80010b8 <main+0x34>
 80010ec:	200000d8 	.word	0x200000d8
 80010f0:	200000c0 	.word	0x200000c0
 80010f4:	20000000 	.word	0x20000000
 80010f8:	200000a8 	.word	0x200000a8

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr  r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800111a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001126:	f000 f841 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f000 fb15 	bl	8001758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff ffa9 	bl	8001084 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001134:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001138:	08001920 	.word	0x08001920
  ldr  r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001140:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8001144:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8001148:	200000e0 	.word	0x200000e0

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>

0800114e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001160:	e7fe      	b.n	8001160 <HardFault_Handler+0x4>

08001162 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001166:	e7fe      	b.n	8001166 <MemManage_Handler+0x4>

08001168 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800116c:	e7fe      	b.n	800116c <BusFault_Handler+0x4>

0800116e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001172:	e7fe      	b.n	8001172 <UsageFault_Handler+0x4>

08001174 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4a16      	ldr	r2, [pc, #88]	; (800120c <SystemInit+0x60>)
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <SystemInit+0x60>)
 80011b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <SystemInit+0x64>)
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <SystemInit+0x64>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <SystemInit+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <SystemInit+0x64>)
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <SystemInit+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <SystemInit+0x64>)
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <SystemInit+0x68>)
 80011e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <SystemInit+0x64>)
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <SystemInit+0x64>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SystemInit+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80011fa:	f000 f80d 	bl	8001218 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <SystemInit+0x60>)
 8001200:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001204:	609a      	str	r2, [r3, #8]
#endif
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	40023800 	.word	0x40023800
 8001214:	24003010 	.word	0x24003010

08001218 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <SetSysClock+0xe8>)
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <SetSysClock+0xe8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <SetSysClock+0xe8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <SetSysClock+0x38>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800124e:	d1f0      	bne.n	8001232 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <SetSysClock+0xe8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800125c:	2301      	movs	r3, #1
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	e001      	b.n	8001266 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d142      	bne.n	80012f2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <SetSysClock+0xe8>)
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <SetSysClock+0xe8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001278:	4a22      	ldr	r2, [pc, #136]	; (8001304 <SetSysClock+0xec>)
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SetSysClock+0xec>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <SetSysClock+0xe8>)
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <SetSysClock+0xe8>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800128c:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <SetSysClock+0xe8>)
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <SetSysClock+0xe8>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001296:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <SetSysClock+0xe8>)
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <SetSysClock+0xe8>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80012a2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <SetSysClock+0xe8>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <SetSysClock+0xf0>)
 80012a8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <SetSysClock+0xe8>)
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <SetSysClock+0xe8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012b4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012b6:	bf00      	nop
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <SetSysClock+0xe8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f9      	beq.n	80012b8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <SetSysClock+0xf4>)
 80012c6:	f240 7205 	movw	r2, #1797	; 0x705
 80012ca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <SetSysClock+0xe8>)
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <SetSysClock+0xe8>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 0303 	bic.w	r3, r3, #3
 80012d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80012d8:	4a09      	ldr	r2, [pc, #36]	; (8001300 <SetSysClock+0xe8>)
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <SetSysClock+0xe8>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80012e4:	bf00      	nop
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SetSysClock+0xe8>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d1f9      	bne.n	80012e6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000
 8001308:	07405419 	.word	0x07405419
 800130c:	40023c00 	.word	0x40023c00

08001310 <timer2_init>:

static volatile uint32_t tim2CycleCounter = 0;

second = 0;

void timer2_init(){
 8001310:	b598      	push	{r3, r4, r7, lr}
 8001312:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= BIT0; //TIM2 clock enable
 8001314:	4a25      	ldr	r2, [pc, #148]	; (80013ac <timer2_init+0x9c>)
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <timer2_init+0x9c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = TIM2_PRESCALER - 1;
 8001320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001324:	2200      	movs	r2, #0
 8001326:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = (TIM2_AUTO_RELOAD - 1)/500; //Needs to be 1 millisec to work with the if conditions
 8001328:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <timer2_init+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f892 	bl	800045c <__aeabi_ui2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <timer2_init+0xa4>)
 800133e:	f7ff f903 	bl	8000548 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <timer2_init+0xa8>)
 8001350:	f7fe ff46 	bl	80001e0 <__aeabi_dsub>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <timer2_init+0xac>)
 8001362:	f7ff fa1b 	bl	800079c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fafd 	bl	800096c <__aeabi_d2uiz>
 8001372:	4603      	mov	r3, r0
 8001374:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->DIER |= BIT0; //Update interrupt enable
 8001376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137e:	899b      	ldrh	r3, [r3, #12]
 8001380:	b29b      	uxth	r3, r3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	b29b      	uxth	r3, r3
 8001388:	8193      	strh	r3, [r2, #12]
	NVIC->ISER[0] = BIT28; //Enable TIM2 interrupt
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <timer2_init+0xb0>)
 800138c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001390:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= BIT0; //TIM2 counter enable
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	8013      	strh	r3, [r2, #0]
}
 80013a6:	bf00      	nop
 80013a8:	bd98      	pop	{r3, r4, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	20000004 	.word	0x20000004
 80013b4:	3fe00000 	.word	0x3fe00000
 80013b8:	3ff00000 	.word	0x3ff00000
 80013bc:	407f4000 	.word	0x407f4000
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~BIT0;
 80013c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	8a1b      	ldrh	r3, [r3, #16]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	8213      	strh	r3, [r2, #16]
	if (tim2CycleCounter == 0) {
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <TIM2_IRQHandler+0x60>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d104      	bne.n	80013ee <TIM2_IRQHandler+0x2a>
		second++; // We increment the number of second since the last reset.
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <TIM2_IRQHandler+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <TIM2_IRQHandler+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]
	}
	if(second == 100000){
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <TIM2_IRQHandler+0x64>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <TIM2_IRQHandler+0x68>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d102      	bne.n	80013fe <TIM2_IRQHandler+0x3a>
		second = 0;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <TIM2_IRQHandler+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
	}
	tim2CycleCounter = (tim2CycleCounter + 1) % 1000;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <TIM2_IRQHandler+0x60>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <TIM2_IRQHandler+0x6c>)
 8001406:	fba3 1302 	umull	r1, r3, r3, r2
 800140a:	099b      	lsrs	r3, r3, #6
 800140c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4a03      	ldr	r2, [pc, #12]	; (8001424 <TIM2_IRQHandler+0x60>)
 8001418:	6013      	str	r3, [r2, #0]
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	200000a4 	.word	0x200000a4
 8001428:	200000a8 	.word	0x200000a8
 800142c:	000186a0 	.word	0x000186a0
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <USART2_IRQHandler>:
/*
 * INTERRUPT HANDLER
 */

void USART2_IRQHandler()
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_FLAG_RXNE) {
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <USART2_IRQHandler+0x4c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	2b00      	cmp	r3, #0
 8001444:	d017      	beq.n	8001476 <USART2_IRQHandler+0x42>
		circular_buffer[head] = USART2->DR;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <USART2_IRQHandler+0x50>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <USART2_IRQHandler+0x4c>)
 800144c:	8892      	ldrh	r2, [r2, #4]
 800144e:	b292      	uxth	r2, r2
 8001450:	b2d1      	uxtb	r1, r2
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <USART2_IRQHandler+0x54>)
 8001454:	54d1      	strb	r1, [r2, r3]
		head = (head + 1) % CIRCULAR_BUFFER_SIZE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <USART2_IRQHandler+0x50>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1c59      	adds	r1, r3, #1
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <USART2_IRQHandler+0x58>)
 800145e:	fb83 2301 	smull	r2, r3, r3, r1
 8001462:	10da      	asrs	r2, r3, #3
 8001464:	17cb      	asrs	r3, r1, #31
 8001466:	1ad2      	subs	r2, r2, r3
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	1aca      	subs	r2, r1, r3
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <USART2_IRQHandler+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
	}
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40004400 	.word	0x40004400
 8001484:	200000c4 	.word	0x200000c4
 8001488:	200000ac 	.word	0x200000ac
 800148c:	66666667 	.word	0x66666667

08001490 <uart_init_uart>:
/*
 * FUNCTIONS
 */

void uart_init_uart()
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

	NVIC->ISER[1] |= BIT6; // Enable USART2 global interrupt
 8001494:	4a20      	ldr	r2, [pc, #128]	; (8001518 <uart_init_uart+0x88>)
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <uart_init_uart+0x88>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149e:	6053      	str	r3, [r2, #4]
	RCC->APB1ENR |= BIT17; // Enable USART2 clock
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <uart_init_uart+0x8c>)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <uart_init_uart+0x8c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40

	RCC->AHB1ENR |= BIT0; // GPIOA clock
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <uart_init_uart+0x8c>)
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <uart_init_uart+0x8c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30

	// set gpio mode, etc.
	GPIOA->MODER |= BIT5 | BIT7; // Alternate function for PA2 and PA3
 80014b8:	4a19      	ldr	r2, [pc, #100]	; (8001520 <uart_init_uart+0x90>)
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <uart_init_uart+0x90>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80014c2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0b0111 << 8) | (0b0111 << 12); // Alternate function 7: USART1-3
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <uart_init_uart+0x90>)
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <uart_init_uart+0x90>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80014ce:	6213      	str	r3, [r2, #32]

	USART2->CR1 &= ~BIT12; // 8 data bits
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <uart_init_uart+0x94>)
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <uart_init_uart+0x94>)
 80014d4:	899b      	ldrh	r3, [r3, #12]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014dc:	b29b      	uxth	r3, r3
 80014de:	8193      	strh	r3, [r2, #12]

	USART2->CR1 |=
 80014e0:	4a10      	ldr	r2, [pc, #64]	; (8001524 <uart_init_uart+0x94>)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <uart_init_uart+0x94>)
 80014e4:	899b      	ldrh	r3, [r3, #12]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ec:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	8193      	strh	r3, [r2, #12]
			BIT5 | // RXNE interrupt enable
			BIT3 | // Transmitter enable TODO: avoid transmitting
			BIT2 // Receiver enable
			;

	USART2->CR2 &= ~(BIT12 | BIT13); // 1 stop bit
 80014f4:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <uart_init_uart+0x94>)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <uart_init_uart+0x94>)
 80014f8:	8a1b      	ldrh	r3, [r3, #16]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001500:	b29b      	uxth	r3, r3
 8001502:	8213      	strh	r3, [r2, #16]

	// set baud rate
	USART2->BRR = (BAUD_RATE_MANTISSA << 4) | (BAUD_RATE_FRACTION & 0b1111);
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <uart_init_uart+0x94>)
 8001506:	f640 22f1 	movw	r2, #2801	; 0xaf1
 800150a:	811a      	strh	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40004400 	.word	0x40004400

08001528 <uart_transmit_echo>:
		(*buffer) = circular_buffer[tail];
		tail = (tail + 1) % CIRCULAR_BUFFER_SIZE;
	}
}

void uart_transmit_echo() {
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	if (head != tail) {
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <uart_transmit_echo+0x58>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <uart_transmit_echo+0x5c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d01e      	beq.n	8001576 <uart_transmit_echo+0x4e>
		while (!(USART2->SR & USART_FLAG_TXE));
 8001538:	bf00      	nop
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <uart_transmit_echo+0x60>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f8      	beq.n	800153a <uart_transmit_echo+0x12>
		USART2->DR = circular_buffer[tail];
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <uart_transmit_echo+0x60>)
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <uart_transmit_echo+0x5c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	490f      	ldr	r1, [pc, #60]	; (800158c <uart_transmit_echo+0x64>)
 8001550:	5ccb      	ldrb	r3, [r1, r3]
 8001552:	b29b      	uxth	r3, r3
 8001554:	8093      	strh	r3, [r2, #4]
		tail = (tail + 1) % CIRCULAR_BUFFER_SIZE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <uart_transmit_echo+0x5c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1c59      	adds	r1, r3, #1
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <uart_transmit_echo+0x68>)
 800155e:	fb83 2301 	smull	r2, r3, r3, r1
 8001562:	10da      	asrs	r2, r3, #3
 8001564:	17cb      	asrs	r3, r1, #31
 8001566:	1ad2      	subs	r2, r2, r3
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	1aca      	subs	r2, r1, r3
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <uart_transmit_echo+0x5c>)
 8001574:	601a      	str	r2, [r3, #0]
	}
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	200000c4 	.word	0x200000c4
 8001584:	200000c8 	.word	0x200000c8
 8001588:	40004400 	.word	0x40004400
 800158c:	200000ac 	.word	0x200000ac
 8001590:	66666667 	.word	0x66666667

08001594 <delay_cycles>:
#include "utils.h"
#include "stm32f4xx.h"
#include "macro_utiles.h"

void delay_cycles(int time){
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	volatile int i;
	for(i = 0; i < time; i++);
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e002      	b.n	80015a8 <delay_cycles+0x14>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3301      	adds	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf8      	blt.n	80015a2 <delay_cycles+0xe>
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <set_gpio_mode>:

void set_gpio_mode(char port, int pin_number, int mode)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	73fb      	strb	r3, [r7, #15]
	int shifted_mask = 0b11 << (2 * pin_number);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
	int shifted_mode = mode << (2 * pin_number);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	613b      	str	r3, [r7, #16]

	switch(port) {
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3b41      	subs	r3, #65	; 0x41
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d83e      	bhi.n	8001668 <set_gpio_mode+0xac>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <set_gpio_mode+0x34>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001605 	.word	0x08001605
 80015f4:	08001619 	.word	0x08001619
 80015f8:	0800162d 	.word	0x0800162d
 80015fc:	08001641 	.word	0x08001641
 8001600:	08001655 	.word	0x08001655
	case 'A':
		GPIOA->MODER = (GPIOA->MODER & ~shifted_mask) ^ shifted_mode;
 8001604:	491c      	ldr	r1, [pc, #112]	; (8001678 <set_gpio_mode+0xbc>)
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <set_gpio_mode+0xbc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	43d2      	mvns	r2, r2
 800160e:	401a      	ands	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4053      	eors	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
		break;
 8001616:	e028      	b.n	800166a <set_gpio_mode+0xae>
	case 'B':
		GPIOB->MODER = (GPIOB->MODER & ~shifted_mask) ^ shifted_mode;
 8001618:	4918      	ldr	r1, [pc, #96]	; (800167c <set_gpio_mode+0xc0>)
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <set_gpio_mode+0xc0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	43d2      	mvns	r2, r2
 8001622:	401a      	ands	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4053      	eors	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
		break;
 800162a:	e01e      	b.n	800166a <set_gpio_mode+0xae>
	case 'C':
		GPIOC->MODER = (GPIOC->MODER & ~shifted_mask) ^ shifted_mode;
 800162c:	4914      	ldr	r1, [pc, #80]	; (8001680 <set_gpio_mode+0xc4>)
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <set_gpio_mode+0xc4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	43d2      	mvns	r2, r2
 8001636:	401a      	ands	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4053      	eors	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
		break;
 800163e:	e014      	b.n	800166a <set_gpio_mode+0xae>
	case 'D':
		GPIOD->MODER = (GPIOD->MODER & ~shifted_mask) ^ shifted_mode;
 8001640:	4910      	ldr	r1, [pc, #64]	; (8001684 <set_gpio_mode+0xc8>)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <set_gpio_mode+0xc8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	43d2      	mvns	r2, r2
 800164a:	401a      	ands	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4053      	eors	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
		break;
 8001652:	e00a      	b.n	800166a <set_gpio_mode+0xae>
	case 'E':
			GPIOE->MODER = (GPIOE->MODER & ~shifted_mask) ^ shifted_mode;
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <set_gpio_mode+0xcc>)
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <set_gpio_mode+0xcc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	43d2      	mvns	r2, r2
 800165e:	401a      	ands	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4053      	eors	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
			break;
 8001666:	e000      	b.n	800166a <set_gpio_mode+0xae>
	default:
		break;
 8001668:	bf00      	nop
	}
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000

0800168c <set_gpio_output>:
		break;
	}
}

void set_gpio_output(char port, int pin_number, int value)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
	int shifted_mask = 0b1 << pin_number;
 800169a:	2201      	movs	r2, #1
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
	int shifted_value = value << pin_number;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	613b      	str	r3, [r7, #16]

	switch(port) {
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3b41      	subs	r3, #65	; 0x41
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d83e      	bhi.n	8001734 <set_gpio_output+0xa8>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <set_gpio_output+0x30>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016d1 	.word	0x080016d1
 80016c0:	080016e5 	.word	0x080016e5
 80016c4:	080016f9 	.word	0x080016f9
 80016c8:	0800170d 	.word	0x0800170d
 80016cc:	08001721 	.word	0x08001721
	case 'A':
		GPIOA->ODR = (GPIOA->ODR & ~shifted_mask) ^ shifted_value;
 80016d0:	491c      	ldr	r1, [pc, #112]	; (8001744 <set_gpio_output+0xb8>)
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <set_gpio_output+0xb8>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	43d2      	mvns	r2, r2
 80016da:	401a      	ands	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4053      	eors	r3, r2
 80016e0:	614b      	str	r3, [r1, #20]
		break;
 80016e2:	e028      	b.n	8001736 <set_gpio_output+0xaa>
	case 'B':
		GPIOB->ODR = (GPIOB->ODR & ~shifted_mask) ^ shifted_value;
 80016e4:	4918      	ldr	r1, [pc, #96]	; (8001748 <set_gpio_output+0xbc>)
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <set_gpio_output+0xbc>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	401a      	ands	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4053      	eors	r3, r2
 80016f4:	614b      	str	r3, [r1, #20]
		break;
 80016f6:	e01e      	b.n	8001736 <set_gpio_output+0xaa>
	case 'C':
		GPIOC->ODR = (GPIOC->ODR & ~shifted_mask) ^ shifted_value;
 80016f8:	4914      	ldr	r1, [pc, #80]	; (800174c <set_gpio_output+0xc0>)
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <set_gpio_output+0xc0>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	43d2      	mvns	r2, r2
 8001702:	401a      	ands	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4053      	eors	r3, r2
 8001708:	614b      	str	r3, [r1, #20]
		break;
 800170a:	e014      	b.n	8001736 <set_gpio_output+0xaa>
	case 'D':
		GPIOD->ODR = (GPIOD->ODR & ~shifted_mask) ^ shifted_value;
 800170c:	4910      	ldr	r1, [pc, #64]	; (8001750 <set_gpio_output+0xc4>)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <set_gpio_output+0xc4>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	43d2      	mvns	r2, r2
 8001716:	401a      	ands	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4053      	eors	r3, r2
 800171c:	614b      	str	r3, [r1, #20]
		break;
 800171e:	e00a      	b.n	8001736 <set_gpio_output+0xaa>
	case 'E':
		GPIOE->ODR = (GPIOE->ODR & ~shifted_mask) ^ shifted_value;
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <set_gpio_output+0xc8>)
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <set_gpio_output+0xc8>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	43d2      	mvns	r2, r2
 800172a:	401a      	ands	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4053      	eors	r3, r2
 8001730:	614b      	str	r3, [r1, #20]
		break;
 8001732:	e000      	b.n	8001736 <set_gpio_output+0xaa>
	default:
		break;
 8001734:	bf00      	nop
	}
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000

08001758 <__libc_init_array>:
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	4e0d      	ldr	r6, [pc, #52]	; (8001790 <__libc_init_array+0x38>)
 800175c:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__libc_init_array+0x3c>)
 800175e:	1ba4      	subs	r4, r4, r6
 8001760:	10a4      	asrs	r4, r4, #2
 8001762:	2500      	movs	r5, #0
 8001764:	42a5      	cmp	r5, r4
 8001766:	d109      	bne.n	800177c <__libc_init_array+0x24>
 8001768:	4e0b      	ldr	r6, [pc, #44]	; (8001798 <__libc_init_array+0x40>)
 800176a:	4c0c      	ldr	r4, [pc, #48]	; (800179c <__libc_init_array+0x44>)
 800176c:	f000 f89e 	bl	80018ac <_init>
 8001770:	1ba4      	subs	r4, r4, r6
 8001772:	10a4      	asrs	r4, r4, #2
 8001774:	2500      	movs	r5, #0
 8001776:	42a5      	cmp	r5, r4
 8001778:	d105      	bne.n	8001786 <__libc_init_array+0x2e>
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001780:	4798      	blx	r3
 8001782:	3501      	adds	r5, #1
 8001784:	e7ee      	b.n	8001764 <__libc_init_array+0xc>
 8001786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800178a:	4798      	blx	r3
 800178c:	3501      	adds	r5, #1
 800178e:	e7f2      	b.n	8001776 <__libc_init_array+0x1e>
 8001790:	08001918 	.word	0x08001918
 8001794:	08001918 	.word	0x08001918
 8001798:	08001918 	.word	0x08001918
 800179c:	0800191c 	.word	0x0800191c

080017a0 <malloc>:
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <malloc+0xc>)
 80017a2:	4601      	mov	r1, r0
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f000 b803 	b.w	80017b0 <_malloc_r>
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <_malloc_r>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	1ccd      	adds	r5, r1, #3
 80017b4:	f025 0503 	bic.w	r5, r5, #3
 80017b8:	3508      	adds	r5, #8
 80017ba:	2d0c      	cmp	r5, #12
 80017bc:	bf38      	it	cc
 80017be:	250c      	movcc	r5, #12
 80017c0:	2d00      	cmp	r5, #0
 80017c2:	4606      	mov	r6, r0
 80017c4:	db01      	blt.n	80017ca <_malloc_r+0x1a>
 80017c6:	42a9      	cmp	r1, r5
 80017c8:	d903      	bls.n	80017d2 <_malloc_r+0x22>
 80017ca:	230c      	movs	r3, #12
 80017cc:	6033      	str	r3, [r6, #0]
 80017ce:	2000      	movs	r0, #0
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
 80017d2:	f000 f85b 	bl	800188c <__malloc_lock>
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <_malloc_r+0xb4>)
 80017d8:	6814      	ldr	r4, [r2, #0]
 80017da:	4621      	mov	r1, r4
 80017dc:	b991      	cbnz	r1, 8001804 <_malloc_r+0x54>
 80017de:	4c22      	ldr	r4, [pc, #136]	; (8001868 <_malloc_r+0xb8>)
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	b91b      	cbnz	r3, 80017ec <_malloc_r+0x3c>
 80017e4:	4630      	mov	r0, r6
 80017e6:	f000 f841 	bl	800186c <_sbrk_r>
 80017ea:	6020      	str	r0, [r4, #0]
 80017ec:	4629      	mov	r1, r5
 80017ee:	4630      	mov	r0, r6
 80017f0:	f000 f83c 	bl	800186c <_sbrk_r>
 80017f4:	1c43      	adds	r3, r0, #1
 80017f6:	d126      	bne.n	8001846 <_malloc_r+0x96>
 80017f8:	230c      	movs	r3, #12
 80017fa:	6033      	str	r3, [r6, #0]
 80017fc:	4630      	mov	r0, r6
 80017fe:	f000 f846 	bl	800188e <__malloc_unlock>
 8001802:	e7e4      	b.n	80017ce <_malloc_r+0x1e>
 8001804:	680b      	ldr	r3, [r1, #0]
 8001806:	1b5b      	subs	r3, r3, r5
 8001808:	d41a      	bmi.n	8001840 <_malloc_r+0x90>
 800180a:	2b0b      	cmp	r3, #11
 800180c:	d90f      	bls.n	800182e <_malloc_r+0x7e>
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	50cd      	str	r5, [r1, r3]
 8001812:	18cc      	adds	r4, r1, r3
 8001814:	4630      	mov	r0, r6
 8001816:	f000 f83a 	bl	800188e <__malloc_unlock>
 800181a:	f104 000b 	add.w	r0, r4, #11
 800181e:	1d23      	adds	r3, r4, #4
 8001820:	f020 0007 	bic.w	r0, r0, #7
 8001824:	1ac3      	subs	r3, r0, r3
 8001826:	d01b      	beq.n	8001860 <_malloc_r+0xb0>
 8001828:	425a      	negs	r2, r3
 800182a:	50e2      	str	r2, [r4, r3]
 800182c:	bd70      	pop	{r4, r5, r6, pc}
 800182e:	428c      	cmp	r4, r1
 8001830:	bf0d      	iteet	eq
 8001832:	6863      	ldreq	r3, [r4, #4]
 8001834:	684b      	ldrne	r3, [r1, #4]
 8001836:	6063      	strne	r3, [r4, #4]
 8001838:	6013      	streq	r3, [r2, #0]
 800183a:	bf18      	it	ne
 800183c:	460c      	movne	r4, r1
 800183e:	e7e9      	b.n	8001814 <_malloc_r+0x64>
 8001840:	460c      	mov	r4, r1
 8001842:	6849      	ldr	r1, [r1, #4]
 8001844:	e7ca      	b.n	80017dc <_malloc_r+0x2c>
 8001846:	1cc4      	adds	r4, r0, #3
 8001848:	f024 0403 	bic.w	r4, r4, #3
 800184c:	42a0      	cmp	r0, r4
 800184e:	d005      	beq.n	800185c <_malloc_r+0xac>
 8001850:	1a21      	subs	r1, r4, r0
 8001852:	4630      	mov	r0, r6
 8001854:	f000 f80a 	bl	800186c <_sbrk_r>
 8001858:	3001      	adds	r0, #1
 800185a:	d0cd      	beq.n	80017f8 <_malloc_r+0x48>
 800185c:	6025      	str	r5, [r4, #0]
 800185e:	e7d9      	b.n	8001814 <_malloc_r+0x64>
 8001860:	bd70      	pop	{r4, r5, r6, pc}
 8001862:	bf00      	nop
 8001864:	200000cc 	.word	0x200000cc
 8001868:	200000d0 	.word	0x200000d0

0800186c <_sbrk_r>:
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	4c06      	ldr	r4, [pc, #24]	; (8001888 <_sbrk_r+0x1c>)
 8001870:	2300      	movs	r3, #0
 8001872:	4605      	mov	r5, r0
 8001874:	4608      	mov	r0, r1
 8001876:	6023      	str	r3, [r4, #0]
 8001878:	f000 f80a 	bl	8001890 <_sbrk>
 800187c:	1c43      	adds	r3, r0, #1
 800187e:	d102      	bne.n	8001886 <_sbrk_r+0x1a>
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	b103      	cbz	r3, 8001886 <_sbrk_r+0x1a>
 8001884:	602b      	str	r3, [r5, #0]
 8001886:	bd38      	pop	{r3, r4, r5, pc}
 8001888:	200000dc 	.word	0x200000dc

0800188c <__malloc_lock>:
 800188c:	4770      	bx	lr

0800188e <__malloc_unlock>:
 800188e:	4770      	bx	lr

08001890 <_sbrk>:
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <_sbrk+0x14>)
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	4602      	mov	r2, r0
 8001896:	b909      	cbnz	r1, 800189c <_sbrk+0xc>
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <_sbrk+0x18>)
 800189a:	6019      	str	r1, [r3, #0]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	4402      	add	r2, r0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4770      	bx	lr
 80018a4:	200000d4 	.word	0x200000d4
 80018a8:	200000e0 	.word	0x200000e0

080018ac <_init>:
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	bf00      	nop
 80018b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b2:	bc08      	pop	{r3}
 80018b4:	469e      	mov	lr, r3
 80018b6:	4770      	bx	lr

080018b8 <_fini>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	bf00      	nop
 80018bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018be:	bc08      	pop	{r3}
 80018c0:	469e      	mov	lr, r3
 80018c2:	4770      	bx	lr
