
smi-lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001928  08001928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08001984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
  7 .bss          00000070  2000006c  2000006c  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000dc  200000dc  0002006c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000321c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000aab  00000000  00000000  000232b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000250  00000000  00000000  00023d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  00023fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001485  00000000  00000000  00024170  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d18  00000000  00000000  000255f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002630d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000087c  00000000  00000000  0002638c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00026c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001910 	.word	0x08001910

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08001910 	.word	0x08001910

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <command_parser_init>:
static char allReceivedBytes[16];
static unsigned int bytesToShow = 0;
static int current_byte_index = 0;
static char command_buffer[COMMAND_BUFFER_SIZE];

void command_parser_init() {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
	current_byte_index = 0;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <command_parser_init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < COMMAND_BUFFER_SIZE; i++) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	e007      	b.n	80009ce <command_parser_init+0x22>
		command_buffer[i] = 0;
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <command_parser_init+0x54>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < COMMAND_BUFFER_SIZE; i++) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	ddf4      	ble.n	80009be <command_parser_init+0x12>
	}
	for (int i = 0; i < LCD_LINE_SIZE; i++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	e007      	b.n	80009ea <command_parser_init+0x3e>
		allReceivedBytes[i] = 0;
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <command_parser_init+0x58>)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_LINE_SIZE; i++) {
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	ddf4      	ble.n	80009da <command_parser_init+0x2e>
	}
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	2000009c 	.word	0x2000009c
 8000a00:	200000a0 	.word	0x200000a0
 8000a04:	20000088 	.word	0x20000088

08000a08 <consume_byte>:

void consume_byte(char received_byte) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]

	command_buffer[current_byte_index] = received_byte;
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <consume_byte+0xd4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4932      	ldr	r1, [pc, #200]	; (8000ae0 <consume_byte+0xd8>)
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	54ca      	strb	r2, [r1, r3]
	if (current_byte_index == 2) {
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <consume_byte+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d149      	bne.n	8000ab8 <consume_byte+0xb0>
		char command = command_buffer[0];
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <consume_byte+0xd8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	72fb      	strb	r3, [r7, #11]
		char parameter = command_buffer[1];
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <consume_byte+0xd8>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	72bb      	strb	r3, [r7, #10]
		char checksum = command_buffer[2];
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <consume_byte+0xd8>)
 8000a32:	789b      	ldrb	r3, [r3, #2]
 8000a34:	727b      	strb	r3, [r7, #9]

		// checksum (modulo 256 is implicit, char will overflow)
		if (((int) command + (int) parameter + (int) checksum) % 256 == 0) {
 8000a36:	7afa      	ldrb	r2, [r7, #11]
 8000a38:	7abb      	ldrb	r3, [r7, #10]
 8000a3a:	441a      	add	r2, r3
 8000a3c:	7a7b      	ldrb	r3, [r7, #9]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d138      	bne.n	8000ab8 <consume_byte+0xb0>
			if(command == 0x41){
 8000a46:	7afb      	ldrb	r3, [r7, #11]
 8000a48:	2b41      	cmp	r3, #65	; 0x41
 8000a4a:	d10b      	bne.n	8000a64 <consume_byte+0x5c>
			   if(parameter == 0x30) {
 8000a4c:	7abb      	ldrb	r3, [r7, #10]
 8000a4e:	2b30      	cmp	r3, #48	; 0x30
 8000a50:	d102      	bne.n	8000a58 <consume_byte+0x50>
				   turnOffTheLed();
 8000a52:	f000 fb47 	bl	80010e4 <turnOffTheLed>
 8000a56:	e02f      	b.n	8000ab8 <consume_byte+0xb0>
			   } else if (parameter == 0x31) {
 8000a58:	7abb      	ldrb	r3, [r7, #10]
 8000a5a:	2b31      	cmp	r3, #49	; 0x31
 8000a5c:	d12c      	bne.n	8000ab8 <consume_byte+0xb0>
				   turnOnTheLed();
 8000a5e:	f000 fb31 	bl	80010c4 <turnOnTheLed>
 8000a62:	e029      	b.n	8000ab8 <consume_byte+0xb0>
			   }
			} else if (command == 0x42){
 8000a64:	7afb      	ldrb	r3, [r7, #11]
 8000a66:	2b42      	cmp	r3, #66	; 0x42
 8000a68:	d112      	bne.n	8000a90 <consume_byte+0x88>
				goToSecondLine();
 8000a6a:	f000 fa03 	bl	8000e74 <goToSecondLine>
				for(int i = 0; i < LCD_LINE_SIZE; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e009      	b.n	8000a88 <consume_byte+0x80>
					lcd_write_blank_space();
 8000a74:	f000 fad4 	bl	8001020 <lcd_write_blank_space>
					allReceivedBytes[i] = 0;
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <consume_byte+0xdc>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < LCD_LINE_SIZE; i++){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	ddf2      	ble.n	8000a74 <consume_byte+0x6c>
 8000a8e:	e013      	b.n	8000ab8 <consume_byte+0xb0>
				}
			} else if(command == 0x43) {
 8000a90:	7afb      	ldrb	r3, [r7, #11]
 8000a92:	2b43      	cmp	r3, #67	; 0x43
 8000a94:	d110      	bne.n	8000ab8 <consume_byte+0xb0>
				allReceivedBytes[bytesToShow] = parameter;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <consume_byte+0xe0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4912      	ldr	r1, [pc, #72]	; (8000ae4 <consume_byte+0xdc>)
 8000a9c:	7aba      	ldrb	r2, [r7, #10]
 8000a9e:	54ca      	strb	r2, [r1, r3]
				bytesToShow = (bytesToShow + 1) % LCD_LINE_SIZE;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <consume_byte+0xe0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <consume_byte+0xe0>)
 8000aac:	6013      	str	r3, [r2, #0]
				goToSecondLine();
 8000aae:	f000 f9e1 	bl	8000e74 <goToSecondLine>
				lcd_write_characters(allReceivedBytes);
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <consume_byte+0xdc>)
 8000ab4:	f000 fa06 	bl	8000ec4 <lcd_write_characters>
			}
		}
	}

	current_byte_index = (current_byte_index + 1) % COMMAND_BUFFER_SIZE;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <consume_byte+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	1c59      	adds	r1, r3, #1
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <consume_byte+0xe4>)
 8000ac0:	fb83 3201 	smull	r3, r2, r3, r1
 8000ac4:	17cb      	asrs	r3, r1, #31
 8000ac6:	1ad2      	subs	r2, r2, r3
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	1aca      	subs	r2, r1, r3
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <consume_byte+0xd4>)
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000009c 	.word	0x2000009c
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	20000088 	.word	0x20000088
 8000ae8:	20000098 	.word	0x20000098
 8000aec:	55555556 	.word	0x55555556

08000af0 <charToBinary>:
#define NUMBER8				"00111000"
#define NUMBER9				"00111001"

/* Private functions */

char* charToBinary(char c){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	char* binaryForm;
	binaryForm = (char*)malloc(8);
 8000afa:	2008      	movs	r0, #8
 8000afc:	f000 fe82 	bl	8001804 <malloc>
 8000b00:	4603      	mov	r3, r0
 8000b02:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < 8; ++i) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e01b      	b.n	8000b42 <charToBinary+0x52>
		if ((c & (1 << i)) == 0) {
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	fa42 f303 	asr.w	r3, r2, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d108      	bne.n	8000b2c <charToBinary+0x3c>
			binaryForm[7 - i] = '0';
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1c3 0307 	rsb	r3, r3, #7
 8000b20:	461a      	mov	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4413      	add	r3, r2
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e007      	b.n	8000b3c <charToBinary+0x4c>
		} else {
			binaryForm[7 - i] = '1';
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	461a      	mov	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4413      	add	r3, r2
 8000b38:	2231      	movs	r2, #49	; 0x31
 8000b3a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; ++i) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b07      	cmp	r3, #7
 8000b46:	dde0      	ble.n	8000b0a <charToBinary+0x1a>
		}
	}
	binaryForm[i] = '\0';
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	return (char*)binaryForm;
 8000b52:	68bb      	ldr	r3, [r7, #8]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LCD_pre_Send_Command>:

void LCD_pre_Send_Command(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	set_gpio_output(LCD_PORT, LCD_RS, 0); //Command Mode
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2045      	movs	r0, #69	; 0x45
 8000b66:	f000 fdc3 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT, LCD_RW, 0); //R/W to 0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	2045      	movs	r0, #69	; 0x45
 8000b70:	f000 fdbe 	bl	80016f0 <set_gpio_output>
	delay_cycles(12000);
 8000b74:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000b78:	f000 fd3e 	bl	80015f8 <delay_cycles>
	set_gpio_output(LCD_PORT, LCD_EN, 1); //Set Enable to 1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2102      	movs	r1, #2
 8000b80:	2045      	movs	r0, #69	; 0x45
 8000b82:	f000 fdb5 	bl	80016f0 <set_gpio_output>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <LCD_post_Send>:

void LCD_post_Send(){
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
	set_gpio_output(LCD_PORT, LCD_EN, 0); //Set Enable to 0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2102      	movs	r1, #2
 8000b92:	2045      	movs	r0, #69	; 0x45
 8000b94:	f000 fdac 	bl	80016f0 <set_gpio_output>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <LCD_pre_Write_Command>:

void LCD_pre_Write_Command(){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	set_gpio_output(LCD_PORT, LCD_RS, 1); //Data Mode
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2045      	movs	r0, #69	; 0x45
 8000ba6:	f000 fda3 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT, LCD_RW, 0); //R/W to 0
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	2045      	movs	r0, #69	; 0x45
 8000bb0:	f000 fd9e 	bl	80016f0 <set_gpio_output>
	delay_cycles(12000);
 8000bb4:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000bb8:	f000 fd1e 	bl	80015f8 <delay_cycles>
	set_gpio_output(LCD_PORT, LCD_EN, 1); //Set Enable
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	2045      	movs	r0, #69	; 0x45
 8000bc2:	f000 fd95 	bl	80016f0 <set_gpio_output>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <LCD_write_Instruction>:

void LCD_write_Instruction(char* instruction){
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	// write instruction on 8 bit data bus
	set_gpio_output(LCD_PORT_D4_D7, D7, (int)instruction[0]);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2103      	movs	r1, #3
 8000bda:	2042      	movs	r0, #66	; 0x42
 8000bdc:	f000 fd88 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D4_D7, D6, (int)instruction[1]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	2102      	movs	r1, #2
 8000bea:	2042      	movs	r0, #66	; 0x42
 8000bec:	f000 fd80 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D4_D7, D5, (int)instruction[2]);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2042      	movs	r0, #66	; 0x42
 8000bfc:	f000 fd78 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D4_D7, D4, (int)instruction[3]);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3303      	adds	r3, #3
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2042      	movs	r0, #66	; 0x42
 8000c0c:	f000 fd70 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D3, (int)instruction[4]);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3304      	adds	r3, #4
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	210a      	movs	r1, #10
 8000c1a:	2045      	movs	r0, #69	; 0x45
 8000c1c:	f000 fd68 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D2, (int)instruction[5]);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3305      	adds	r3, #5
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	2109      	movs	r1, #9
 8000c2a:	2045      	movs	r0, #69	; 0x45
 8000c2c:	f000 fd60 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D1, (int)instruction[6]);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3306      	adds	r3, #6
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	2108      	movs	r1, #8
 8000c3a:	2045      	movs	r0, #69	; 0x45
 8000c3c:	f000 fd58 	bl	80016f0 <set_gpio_output>
	set_gpio_output(LCD_PORT_D0_D3, D0, (int)instruction[7]);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3307      	adds	r3, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2107      	movs	r1, #7
 8000c4a:	2045      	movs	r0, #69	; 0x45
 8000c4c:	f000 fd50 	bl	80016f0 <set_gpio_output>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <lcd_init>:

void lcd_init(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	// enable clock
	RCC->AHB1ENR |= BIT4;
 8000c5c:	4a5b      	ldr	r2, [pc, #364]	; (8000dcc <lcd_init+0x174>)
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <lcd_init+0x174>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= BIT1;
 8000c68:	4a58      	ldr	r2, [pc, #352]	; (8000dcc <lcd_init+0x174>)
 8000c6a:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <lcd_init+0x174>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= BIT0;
 8000c74:	4a55      	ldr	r2, [pc, #340]	; (8000dcc <lcd_init+0x174>)
 8000c76:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <lcd_init+0x174>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30

	// set GPIO modes
	set_gpio_mode(LCD_PORT, LCD_RS, GPIO_OUTPUT_MODE);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	2045      	movs	r0, #69	; 0x45
 8000c86:	f000 fccb 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT, LCD_RW, GPIO_OUTPUT_MODE);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2045      	movs	r0, #69	; 0x45
 8000c90:	f000 fcc6 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT, LCD_EN, GPIO_OUTPUT_MODE);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2102      	movs	r1, #2
 8000c98:	2045      	movs	r0, #69	; 0x45
 8000c9a:	f000 fcc1 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D0, GPIO_OUTPUT_MODE);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	2045      	movs	r0, #69	; 0x45
 8000ca4:	f000 fcbc 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D1, GPIO_OUTPUT_MODE);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2108      	movs	r1, #8
 8000cac:	2045      	movs	r0, #69	; 0x45
 8000cae:	f000 fcb7 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D2, GPIO_OUTPUT_MODE);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2109      	movs	r1, #9
 8000cb6:	2045      	movs	r0, #69	; 0x45
 8000cb8:	f000 fcb2 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D0_D3, D3, GPIO_OUTPUT_MODE);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	2045      	movs	r0, #69	; 0x45
 8000cc2:	f000 fcad 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D4, GPIO_OUTPUT_MODE);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2042      	movs	r0, #66	; 0x42
 8000ccc:	f000 fca8 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D5, GPIO_OUTPUT_MODE);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2042      	movs	r0, #66	; 0x42
 8000cd6:	f000 fca3 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D6, GPIO_OUTPUT_MODE);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2102      	movs	r1, #2
 8000cde:	2042      	movs	r0, #66	; 0x42
 8000ce0:	f000 fc9e 	bl	8001620 <set_gpio_mode>
	set_gpio_mode(LCD_PORT_D4_D7, D7, GPIO_OUTPUT_MODE);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	2042      	movs	r0, #66	; 0x42
 8000cea:	f000 fc99 	bl	8001620 <set_gpio_mode>
	//Next command set the display
	LCD_pre_Send_Command();
 8000cee:	f7ff ff35 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <lcd_init+0x178>)
 8000cf4:	4a37      	ldr	r2, [pc, #220]	; (8000dd4 <lcd_init+0x17c>)
 8000cf6:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <lcd_init+0x178>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff64 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d02:	f7ff ff42 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Send_Command();
 8000d06:	f7ff ff29 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <lcd_init+0x178>)
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <lcd_init+0x17c>)
 8000d0e:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <lcd_init+0x178>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff58 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d1a:	f7ff ff36 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Send_Command();
 8000d1e:	f7ff ff1d 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <lcd_init+0x178>)
 8000d24:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <lcd_init+0x17c>)
 8000d26:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <lcd_init+0x178>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff4c 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d32:	f7ff ff2a 	bl	8000b8a <LCD_post_Send>

	//Next command display off
	LCD_pre_Send_Command();
 8000d36:	f7ff ff11 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00001000";
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <lcd_init+0x178>)
 8000d3c:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <lcd_init+0x180>)
 8000d3e:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <lcd_init+0x178>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff40 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d4a:	f7ff ff1e 	bl	8000b8a <LCD_post_Send>

	//Next command clear display
	LCD_pre_Send_Command();
 8000d4e:	f7ff ff05 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00000001";
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <lcd_init+0x178>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <lcd_init+0x184>)
 8000d56:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <lcd_init+0x178>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff34 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d62:	f7ff ff12 	bl	8000b8a <LCD_post_Send>

	//Next command entry mode set
	LCD_pre_Send_Command();
 8000d66:	f7ff fef9 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00000110";
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <lcd_init+0x178>)
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <lcd_init+0x188>)
 8000d6e:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <lcd_init+0x178>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff28 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d7a:	f7ff ff06 	bl	8000b8a <LCD_post_Send>

	//Next command set function
	LCD_pre_Send_Command();
 8000d7e:	f7ff feed 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00111000";
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <lcd_init+0x178>)
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <lcd_init+0x17c>)
 8000d86:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <lcd_init+0x178>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff1c 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000d92:	f7ff fefa 	bl	8000b8a <LCD_post_Send>

	//Next command display on
	LCD_pre_Send_Command();
 8000d96:	f7ff fee1 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00001110";
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <lcd_init+0x178>)
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <lcd_init+0x18c>)
 8000d9e:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <lcd_init+0x178>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff10 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000daa:	f7ff feee 	bl	8000b8a <LCD_post_Send>

	//Next command entry mode set
	LCD_pre_Send_Command();
 8000dae:	f7ff fed5 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00000110";
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <lcd_init+0x178>)
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <lcd_init+0x188>)
 8000db6:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <lcd_init+0x178>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff04 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000dc2:	f7ff fee2 	bl	8000b8a <LCD_post_Send>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	200000a4 	.word	0x200000a4
 8000dd4:	08001928 	.word	0x08001928
 8000dd8:	08001934 	.word	0x08001934
 8000ddc:	08001940 	.word	0x08001940
 8000de0:	0800194c 	.word	0x0800194c
 8000de4:	08001958 	.word	0x08001958

08000de8 <lcd_write_first_row>:

void lcd_write_first_row(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	LCD_pre_Write_Command();
 8000dec:	f7ff fed6 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('F'));
 8000df0:	2046      	movs	r0, #70	; 0x46
 8000df2:	f7ff fe7d 	bl	8000af0 <charToBinary>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fee6 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000dfe:	f7ff fec4 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000e02:	f7ff fecb 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('F'));
 8000e06:	2046      	movs	r0, #70	; 0x46
 8000e08:	f7ff fe72 	bl	8000af0 <charToBinary>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fedb 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000e14:	f7ff feb9 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000e18:	f7ff fec0 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('C'));
 8000e1c:	2043      	movs	r0, #67	; 0x43
 8000e1e:	f7ff fe67 	bl	8000af0 <charToBinary>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fed0 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000e2a:	f7ff feae 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000e2e:	f7ff feb5 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('J'));
 8000e32:	204a      	movs	r0, #74	; 0x4a
 8000e34:	f7ff fe5c 	bl	8000af0 <charToBinary>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fec5 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000e40:	f7ff fea3 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000e44:	f7ff feaa 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('H'));
 8000e48:	2048      	movs	r0, #72	; 0x48
 8000e4a:	f7ff fe51 	bl	8000af0 <charToBinary>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff feba 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000e56:	f7ff fe98 	bl	8000b8a <LCD_post_Send>

	LCD_pre_Write_Command();
 8000e5a:	f7ff fe9f 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary('_'));
 8000e5e:	205f      	movs	r0, #95	; 0x5f
 8000e60:	f7ff fe46 	bl	8000af0 <charToBinary>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feaf 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000e6c:	f7ff fe8d 	bl	8000b8a <LCD_post_Send>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <goToSecondLine>:

void goToSecondLine(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	// go to second line
	LCD_pre_Send_Command();
 8000e78:	f7ff fe70 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "11000000";
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <goToSecondLine+0x20>)
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <goToSecondLine+0x24>)
 8000e80:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <goToSecondLine+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe9f 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000e8c:	f7ff fe7d 	bl	8000b8a <LCD_post_Send>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000a4 	.word	0x200000a4
 8000e98:	08001964 	.word	0x08001964

08000e9c <goToFirstLine>:

void goToFirstLine(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	// go to first line
	LCD_pre_Send_Command();
 8000ea0:	f7ff fe5c 	bl	8000b5c <LCD_pre_Send_Command>
	INSTRUCTION = "00000010";
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <goToFirstLine+0x20>)
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <goToFirstLine+0x24>)
 8000ea8:	601a      	str	r2, [r3, #0]
	LCD_write_Instruction(INSTRUCTION);
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <goToFirstLine+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe8b 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8000eb4:	f7ff fe69 	bl	8000b8a <LCD_post_Send>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000a4 	.word	0x200000a4
 8000ec0:	08001970 	.word	0x08001970

08000ec4 <lcd_write_characters>:

void lcd_write_characters(char* characters){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(characters); i++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e011      	b.n	8000ef6 <lcd_write_characters+0x32>
		LCD_pre_Write_Command();
 8000ed2:	f7ff fe63 	bl	8000b9c <LCD_pre_Write_Command>
		LCD_write_Instruction(charToBinary(characters[i]));
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe06 	bl	8000af0 <charToBinary>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe6f 	bl	8000bca <LCD_write_Instruction>
		LCD_post_Send();
 8000eec:	f7ff fe4d 	bl	8000b8a <LCD_post_Send>
	for (int i = 0; i < strlen(characters); i++) {
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff f966 	bl	80001c8 <strlen>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8e6      	bhi.n	8000ed2 <lcd_write_characters+0xe>
	}
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <lcd_write_time>:

void lcd_write_time(int currentTime){
 8000f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f10:	b08b      	sub	sp, #44	; 0x2c
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	goToFirstLine();
 8000f16:	f7ff ffc1 	bl	8000e9c <goToFirstLine>
	lcd_write_first_row();
 8000f1a:	f7ff ff65 	bl	8000de8 <lcd_write_first_row>
	// Count digits in number of seconds
	int m = currentTime;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
	int digit = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
	while (m) {
 8000f26:	e00a      	b.n	8000f3e <lcd_write_time+0x32>
		digit++;
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
		m /= 10;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	4a3a      	ldr	r2, [pc, #232]	; (800101c <lcd_write_time+0x110>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1092      	asrs	r2, r2, #2
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
	while (m) {
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f1      	bne.n	8000f28 <lcd_write_time+0x1c>
	}
	// Declare char array for result
	char* arr;
	// Declare duplicate char array
	char arr1[digit];
 8000f44:	6a39      	ldr	r1, [r7, #32]
 8000f46:	466b      	mov	r3, sp
 8000f48:	461e      	mov	r6, r3
 8000f4a:	1e4b      	subs	r3, r1, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	461a      	mov	r2, r3
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000f5a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000f5e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000f62:	460b      	mov	r3, r1
 8000f64:	461a      	mov	r2, r3
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	00dd      	lsls	r5, r3, #3
 8000f6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000f70:	00d4      	lsls	r4, r2, #3
 8000f72:	460b      	mov	r3, r1
 8000f74:	3307      	adds	r3, #7
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f7e:	466b      	mov	r3, sp
 8000f80:	3300      	adds	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
	// Memory allocation of array
	arr = (char*)malloc(digit);
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fc3c 	bl	8001804 <malloc>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
	// Separating integer into digits and
	// accommodate it to character array
	int index = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
	while (currentTime) {
 8000f94:	e01e      	b.n	8000fd4 <lcd_write_time+0xc8>
		// Separate last digit from
		// the number and add ASCII
		// value of character '0' is 48
		arr1[++index] = currentTime % 10 + '0';
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <lcd_write_time+0x110>)
 8000fa0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa4:	1099      	asrs	r1, r3, #2
 8000fa6:	17d3      	asrs	r3, r2, #31
 8000fa8:	1ac9      	subs	r1, r1, r3
 8000faa:	460b      	mov	r3, r1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	1ad1      	subs	r1, r2, r3
 8000fb4:	b2cb      	uxtb	r3, r1
 8000fb6:	3330      	adds	r3, #48	; 0x30
 8000fb8:	b2d9      	uxtb	r1, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	701a      	strb	r2, [r3, #0]
		// Truncate the last
		// digit from the number
		currentTime /= 10;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <lcd_write_time+0x110>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1092      	asrs	r2, r2, #2
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	607b      	str	r3, [r7, #4]
	while (currentTime) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1dd      	bne.n	8000f96 <lcd_write_time+0x8a>
	}
	// Reverse the array for result
	int i;
	for (i = 0; i < index; i++) {
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	e00b      	b.n	8000ff8 <lcd_write_time+0xec>
		arr[i] = arr1[index - i];
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	69f9      	ldr	r1, [r7, #28]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	1a8a      	subs	r2, r1, r2
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	5c8a      	ldrb	r2, [r1, r2]
 8000ff0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < index; i++) {
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbef      	blt.n	8000fe0 <lcd_write_time+0xd4>
	}
	// Char array truncate by null
	arr[i] = '\0';
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
	lcd_write_characters((char*)arr);
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff ff5a 	bl	8000ec4 <lcd_write_characters>
 8001010:	46b5      	mov	sp, r6
}
 8001012:	bf00      	nop
 8001014:	372c      	adds	r7, #44	; 0x2c
 8001016:	46bd      	mov	sp, r7
 8001018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800101c:	66666667 	.word	0x66666667

08001020 <lcd_write_blank_space>:

void lcd_write_blank_space(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	LCD_pre_Write_Command();
 8001024:	f7ff fdba 	bl	8000b9c <LCD_pre_Write_Command>
	LCD_write_Instruction(charToBinary(' '));
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff fd61 	bl	8000af0 <charToBinary>
 800102e:	4603      	mov	r3, r0
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdca 	bl	8000bca <LCD_write_Instruction>
	LCD_post_Send();
 8001036:	f7ff fda8 	bl	8000b8a <LCD_post_Send>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <configureLEDs>:
#include "macro_utiles.h"
#include "stm32f4xx.h"
#include "led.h"

void configureLEDs(){
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT3;
 8001044:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <configureLEDs+0x7c>)
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <configureLEDs+0x7c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= BIT24;
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <configureLEDs+0x80>)
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <configureLEDs+0x80>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800105a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT25;
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <configureLEDs+0x80>)
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <configureLEDs+0x80>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001066:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT26;
 8001068:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <configureLEDs+0x80>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <configureLEDs+0x80>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001072:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT27;
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <configureLEDs+0x80>)
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <configureLEDs+0x80>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800107e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT28;
 8001080:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <configureLEDs+0x80>)
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <configureLEDs+0x80>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT29;
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <configureLEDs+0x80>)
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <configureLEDs+0x80>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001096:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT30;
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <configureLEDs+0x80>)
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <configureLEDs+0x80>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT31;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <configureLEDs+0x80>)
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <configureLEDs+0x80>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <turnOnTheLed>:

void turnOnTheLed(){
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	GPIOD->ODR |= LED_VERTE;
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <turnOnTheLed+0x1c>)
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <turnOnTheLed+0x1c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d2:	6153      	str	r3, [r2, #20]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <turnOffTheLed>:

void turnOffTheLed(){
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(LED_VERTE);
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <turnOffTheLed+0x1c>)
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <turnOffTheLed+0x1c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010f2:	6153      	str	r3, [r2, #20]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40020c00 	.word	0x40020c00

08001104 <main>:

static volatile uint32_t lastTimeRead = -1;
static volatile uint32_t lastTransmissionNumber = 0;

int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
    command_parser_init();
 800110a:	f7ff fc4f 	bl	80009ac <command_parser_init>
	uart_init_uart();
 800110e:	f000 f9f5 	bl	80014fc <uart_init_uart>
	lcd_init();
 8001112:	f7ff fda1 	bl	8000c58 <lcd_init>
    lcd_write_first_row();
 8001116:	f7ff fe67 	bl	8000de8 <lcd_write_first_row>
    goToSecondLine();
 800111a:	f7ff feab 	bl	8000e74 <goToSecondLine>
    configureLEDs();
 800111e:	f7ff ff8f 	bl	8001040 <configureLEDs>
    timer2_init();
 8001122:	f000 f92b 	bl	800137c <timer2_init>
		a = USART2->SR;
		USART2->DR = 0xAA;
		volatile int b = USART2->DR;
		// USART2->CR1 &= ~BIT13; // USART Disable*/

		if (uart_get_received_byte(&latest_byte)) {
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fa33 	bl	8001594 <uart_get_received_byte>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <main+0x38>
			consume_byte(latest_byte);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fc66 	bl	8000a08 <consume_byte>
		}

		if(lastTimeRead != second){
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <main+0x5c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <main+0x60>)
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4293      	cmp	r3, r2
 8001146:	d0ee      	beq.n	8001126 <main+0x22>
			lastTimeRead = second;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <main+0x60>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <main+0x5c>)
 8001150:	601a      	str	r2, [r3, #0]
			lcd_write_time(lastTimeRead);
 8001152:	4b03      	ldr	r3, [pc, #12]	; (8001160 <main+0x5c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fed8 	bl	8000f0c <lcd_write_time>
		if (uart_get_received_byte(&latest_byte)) {
 800115c:	e7e3      	b.n	8001126 <main+0x22>
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000
 8001164:	200000ac 	.word	0x200000ac

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800116c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800116e:	e003      	b.n	8001178 <LoopCopyDataInit>

08001170 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001172:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001174:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001176:	3104      	adds	r1, #4

08001178 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800117c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001180:	d3f6      	bcc.n	8001170 <CopyDataInit>
  ldr  r2, =_sbss
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001184:	e002      	b.n	800118c <LoopFillZerobss>

08001186 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001186:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001188:	f842 3b04 	str.w	r3, [r2], #4

0800118c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001190:	d3f9      	bcc.n	8001186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001192:	f000 f841 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f000 fb11 	bl	80017bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff ffb3 	bl	8001104 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011a4:	08001984 	.word	0x08001984
  ldr  r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011ac:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80011b0:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80011b4:	200000dc 	.word	0x200000dc

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>

080011ba <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <HardFault_Handler+0x4>

080011ce <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <BusFault_Handler+0x4>

080011da <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011de:	e7fe      	b.n	80011de <UsageFault_Handler+0x4>

080011e0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4a16      	ldr	r2, [pc, #88]	; (8001278 <SystemInit+0x60>)
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <SystemInit+0x60>)
 8001220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <SystemInit+0x64>)
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <SystemInit+0x64>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <SystemInit+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <SystemInit+0x64>)
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <SystemInit+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <SystemInit+0x64>)
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SystemInit+0x68>)
 8001252:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001254:	4a09      	ldr	r2, [pc, #36]	; (800127c <SystemInit+0x64>)
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <SystemInit+0x64>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001266:	f000 f80d 	bl	8001284 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <SystemInit+0x60>)
 800126c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001270:	609a      	str	r2, [r3, #8]
#endif
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	40023800 	.word	0x40023800
 8001280:	24003010 	.word	0x24003010

08001284 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001292:	4a36      	ldr	r2, [pc, #216]	; (800136c <SetSysClock+0xe8>)
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <SetSysClock+0xe8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <SetSysClock+0xe8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <SetSysClock+0x38>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012ba:	d1f0      	bne.n	800129e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <SetSysClock+0xe8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012c8:	2301      	movs	r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	e001      	b.n	80012d2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d142      	bne.n	800135e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012d8:	4a24      	ldr	r2, [pc, #144]	; (800136c <SetSysClock+0xe8>)
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <SetSysClock+0xe8>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <SetSysClock+0xec>)
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <SetSysClock+0xec>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012f0:	4a1e      	ldr	r2, [pc, #120]	; (800136c <SetSysClock+0xe8>)
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SetSysClock+0xe8>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <SetSysClock+0xe8>)
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <SetSysClock+0xe8>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <SetSysClock+0xe8>)
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <SetSysClock+0xe8>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800130e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <SetSysClock+0xe8>)
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <SetSysClock+0xf0>)
 8001314:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <SetSysClock+0xe8>)
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <SetSysClock+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001320:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001322:	bf00      	nop
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <SetSysClock+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f9      	beq.n	8001324 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SetSysClock+0xf4>)
 8001332:	f240 7205 	movw	r2, #1797	; 0x705
 8001336:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <SetSysClock+0xe8>)
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <SetSysClock+0xe8>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <SetSysClock+0xe8>)
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <SetSysClock+0xe8>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001350:	bf00      	nop
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <SetSysClock+0xe8>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d1f9      	bne.n	8001352 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000
 8001374:	07405419 	.word	0x07405419
 8001378:	40023c00 	.word	0x40023c00

0800137c <timer2_init>:

static volatile uint32_t tim2CycleCounter = 0;

second = 0;

void timer2_init(){
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= BIT0; //TIM2 clock enable
 8001380:	4a25      	ldr	r2, [pc, #148]	; (8001418 <timer2_init+0x9c>)
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <timer2_init+0x9c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = TIM2_PRESCALER - 1;
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	2200      	movs	r2, #0
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = (TIM2_AUTO_RELOAD - 1)/500; //Needs to be 1 millisec to work with the if conditions
 8001394:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <timer2_init+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f85c 	bl	800045c <__aeabi_ui2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <timer2_init+0xa4>)
 80013aa:	f7ff f8cd 	bl	8000548 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <timer2_init+0xa8>)
 80013bc:	f7fe ff10 	bl	80001e0 <__aeabi_dsub>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <timer2_init+0xac>)
 80013ce:	f7ff f9e5 	bl	800079c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fac7 	bl	800096c <__aeabi_d2uiz>
 80013de:	4603      	mov	r3, r0
 80013e0:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->DIER |= BIT0; //Update interrupt enable
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ea:	899b      	ldrh	r3, [r3, #12]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	8193      	strh	r3, [r2, #12]
	NVIC->ISER[0] = BIT28; //Enable TIM2 interrupt
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <timer2_init+0xb0>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fc:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= BIT0; //TIM2 counter enable
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	8013      	strh	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	bd98      	pop	{r3, r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	20000004 	.word	0x20000004
 8001420:	3fe00000 	.word	0x3fe00000
 8001424:	3ff00000 	.word	0x3ff00000
 8001428:	407f4000 	.word	0x407f4000
 800142c:	e000e100 	.word	0xe000e100

08001430 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	TIM2->SR &= ~BIT0;
 8001434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143c:	8a1b      	ldrh	r3, [r3, #16]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	8213      	strh	r3, [r2, #16]
	if (tim2CycleCounter == 0) {
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <TIM2_IRQHandler+0x60>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <TIM2_IRQHandler+0x2a>
		second++; // We increment the number of second since the last reset.
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <TIM2_IRQHandler+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <TIM2_IRQHandler+0x64>)
 8001458:	6013      	str	r3, [r2, #0]
	}
	if(second == 100000){
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <TIM2_IRQHandler+0x64>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <TIM2_IRQHandler+0x68>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <TIM2_IRQHandler+0x3a>
		second = 0;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <TIM2_IRQHandler+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	}
	tim2CycleCounter = (tim2CycleCounter + 1) % 1000;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <TIM2_IRQHandler+0x60>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <TIM2_IRQHandler+0x6c>)
 8001472:	fba3 1302 	umull	r1, r3, r3, r2
 8001476:	099b      	lsrs	r3, r3, #6
 8001478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	4a03      	ldr	r2, [pc, #12]	; (8001490 <TIM2_IRQHandler+0x60>)
 8001484:	6013      	str	r3, [r2, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200000a8 	.word	0x200000a8
 8001494:	200000ac 	.word	0x200000ac
 8001498:	000186a0 	.word	0x000186a0
 800149c:	10624dd3 	.word	0x10624dd3

080014a0 <USART2_IRQHandler>:
/*
 * INTERRUPT HANDLER
 */

void USART2_IRQHandler()
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_FLAG_RXNE) {
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <USART2_IRQHandler+0x4c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d017      	beq.n	80014e2 <USART2_IRQHandler+0x42>
		circular_buffer[head] = USART2->DR;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <USART2_IRQHandler+0x50>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <USART2_IRQHandler+0x4c>)
 80014b8:	8892      	ldrh	r2, [r2, #4]
 80014ba:	b292      	uxth	r2, r2
 80014bc:	b2d1      	uxtb	r1, r2
 80014be:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <USART2_IRQHandler+0x54>)
 80014c0:	54d1      	strb	r1, [r2, r3]
		head = (head + 1) % CIRCULAR_BUFFER_SIZE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <USART2_IRQHandler+0x50>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1c59      	adds	r1, r3, #1
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <USART2_IRQHandler+0x58>)
 80014ca:	fb83 2301 	smull	r2, r3, r3, r1
 80014ce:	10da      	asrs	r2, r3, #3
 80014d0:	17cb      	asrs	r3, r1, #31
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	1aca      	subs	r2, r1, r3
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <USART2_IRQHandler+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
	}
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40004400 	.word	0x40004400
 80014f0:	200000c4 	.word	0x200000c4
 80014f4:	200000b0 	.word	0x200000b0
 80014f8:	66666667 	.word	0x66666667

080014fc <uart_init_uart>:
/*
 * FUNCTIONS
 */

void uart_init_uart()
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

	NVIC->ISER[1] |= BIT6; // Enable USART2 global interrupt
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <uart_init_uart+0x88>)
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <uart_init_uart+0x88>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150a:	6053      	str	r3, [r2, #4]
	RCC->APB1ENR |= BIT17; // Enable USART2 clock
 800150c:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <uart_init_uart+0x8c>)
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <uart_init_uart+0x8c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40

	RCC->AHB1ENR |= BIT0; // GPIOA clock
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <uart_init_uart+0x8c>)
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <uart_init_uart+0x8c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6313      	str	r3, [r2, #48]	; 0x30

	// set gpio mode, etc.
	GPIOA->MODER |= BIT5 | BIT7; // Alternate function for PA2 and PA3
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <uart_init_uart+0x90>)
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <uart_init_uart+0x90>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800152e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0b0111 << 8) | (0b0111 << 12); // Alternate function 7: USART1-3
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <uart_init_uart+0x90>)
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <uart_init_uart+0x90>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800153a:	6213      	str	r3, [r2, #32]

	USART2->CR1 &= ~BIT12; // 8 data bits
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <uart_init_uart+0x94>)
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <uart_init_uart+0x94>)
 8001540:	899b      	ldrh	r3, [r3, #12]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001548:	b29b      	uxth	r3, r3
 800154a:	8193      	strh	r3, [r2, #12]

	USART2->CR1 |=
 800154c:	4a10      	ldr	r2, [pc, #64]	; (8001590 <uart_init_uart+0x94>)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <uart_init_uart+0x94>)
 8001550:	899b      	ldrh	r3, [r3, #12]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001558:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800155c:	b29b      	uxth	r3, r3
 800155e:	8193      	strh	r3, [r2, #12]
			BIT5 | // RXNE interrupt enable
			BIT3 | // Transmitter enable TODO: avoid transmitting
			BIT2 // Receiver enable
			;

	USART2->CR2 &= ~(BIT12 | BIT13); // 1 stop bit
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <uart_init_uart+0x94>)
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <uart_init_uart+0x94>)
 8001564:	8a1b      	ldrh	r3, [r3, #16]
 8001566:	b29b      	uxth	r3, r3
 8001568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156c:	b29b      	uxth	r3, r3
 800156e:	8213      	strh	r3, [r2, #16]

	// set baud rate
	USART2->BRR = (BAUD_RATE_MANTISSA << 4) | (BAUD_RATE_FRACTION & 0b1111);
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <uart_init_uart+0x94>)
 8001572:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001576:	811a      	strh	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40004400 	.word	0x40004400

08001594 <uart_get_received_byte>:

int uart_get_received_byte(char* buffer) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if (head != tail) {
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <uart_get_received_byte+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <uart_get_received_byte+0x58>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d017      	beq.n	80015d8 <uart_get_received_byte+0x44>
		(*buffer) = circular_buffer[tail];
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <uart_get_received_byte+0x58>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <uart_get_received_byte+0x5c>)
 80015ae:	5cd2      	ldrb	r2, [r2, r3]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	701a      	strb	r2, [r3, #0]
		tail = (tail + 1) % CIRCULAR_BUFFER_SIZE;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <uart_get_received_byte+0x58>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <uart_get_received_byte+0x60>)
 80015bc:	fb83 2301 	smull	r2, r3, r3, r1
 80015c0:	10da      	asrs	r2, r3, #3
 80015c2:	17cb      	asrs	r3, r1, #31
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	1aca      	subs	r2, r1, r3
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <uart_get_received_byte+0x58>)
 80015d2:	601a      	str	r2, [r3, #0]
		return 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <uart_get_received_byte+0x46>
	} else {
		return 0;
 80015d8:	2300      	movs	r3, #0
	}
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200000c4 	.word	0x200000c4
 80015ec:	200000c8 	.word	0x200000c8
 80015f0:	200000b0 	.word	0x200000b0
 80015f4:	66666667 	.word	0x66666667

080015f8 <delay_cycles>:
#include "utils.h"
#include "stm32f4xx.h"
#include "macro_utiles.h"

void delay_cycles(int time){
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	volatile int i;
	for(i = 0; i < time; i++);
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e002      	b.n	800160c <delay_cycles+0x14>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf8      	blt.n	8001606 <delay_cycles+0xe>
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <set_gpio_mode>:

void set_gpio_mode(char port, int pin_number, int mode)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	73fb      	strb	r3, [r7, #15]
	int shifted_mask = 0b11 << (2 * pin_number);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
	int shifted_mode = mode << (2 * pin_number);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	613b      	str	r3, [r7, #16]

	switch(port) {
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3b41      	subs	r3, #65	; 0x41
 800164a:	2b04      	cmp	r3, #4
 800164c:	d83e      	bhi.n	80016cc <set_gpio_mode+0xac>
 800164e:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <set_gpio_mode+0x34>)
 8001650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001654:	08001669 	.word	0x08001669
 8001658:	0800167d 	.word	0x0800167d
 800165c:	08001691 	.word	0x08001691
 8001660:	080016a5 	.word	0x080016a5
 8001664:	080016b9 	.word	0x080016b9
	case 'A':
		GPIOA->MODER = (GPIOA->MODER & ~shifted_mask) ^ shifted_mode;
 8001668:	491c      	ldr	r1, [pc, #112]	; (80016dc <set_gpio_mode+0xbc>)
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <set_gpio_mode+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	43d2      	mvns	r2, r2
 8001672:	401a      	ands	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4053      	eors	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
		break;
 800167a:	e028      	b.n	80016ce <set_gpio_mode+0xae>
	case 'B':
		GPIOB->MODER = (GPIOB->MODER & ~shifted_mask) ^ shifted_mode;
 800167c:	4918      	ldr	r1, [pc, #96]	; (80016e0 <set_gpio_mode+0xc0>)
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <set_gpio_mode+0xc0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	43d2      	mvns	r2, r2
 8001686:	401a      	ands	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4053      	eors	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
		break;
 800168e:	e01e      	b.n	80016ce <set_gpio_mode+0xae>
	case 'C':
		GPIOC->MODER = (GPIOC->MODER & ~shifted_mask) ^ shifted_mode;
 8001690:	4914      	ldr	r1, [pc, #80]	; (80016e4 <set_gpio_mode+0xc4>)
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <set_gpio_mode+0xc4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4053      	eors	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
		break;
 80016a2:	e014      	b.n	80016ce <set_gpio_mode+0xae>
	case 'D':
		GPIOD->MODER = (GPIOD->MODER & ~shifted_mask) ^ shifted_mode;
 80016a4:	4910      	ldr	r1, [pc, #64]	; (80016e8 <set_gpio_mode+0xc8>)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <set_gpio_mode+0xc8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4053      	eors	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
		break;
 80016b6:	e00a      	b.n	80016ce <set_gpio_mode+0xae>
	case 'E':
			GPIOE->MODER = (GPIOE->MODER & ~shifted_mask) ^ shifted_mode;
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <set_gpio_mode+0xcc>)
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <set_gpio_mode+0xcc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	401a      	ands	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4053      	eors	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
			break;
 80016ca:	e000      	b.n	80016ce <set_gpio_mode+0xae>
	default:
		break;
 80016cc:	bf00      	nop
	}
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000

080016f0 <set_gpio_output>:
		break;
	}
}

void set_gpio_output(char port, int pin_number, int value)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	73fb      	strb	r3, [r7, #15]
	int shifted_mask = 0b1 << pin_number;
 80016fe:	2201      	movs	r2, #1
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
	int shifted_value = value << pin_number;
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	613b      	str	r3, [r7, #16]

	switch(port) {
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3b41      	subs	r3, #65	; 0x41
 8001716:	2b04      	cmp	r3, #4
 8001718:	d83e      	bhi.n	8001798 <set_gpio_output+0xa8>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <set_gpio_output+0x30>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001735 	.word	0x08001735
 8001724:	08001749 	.word	0x08001749
 8001728:	0800175d 	.word	0x0800175d
 800172c:	08001771 	.word	0x08001771
 8001730:	08001785 	.word	0x08001785
	case 'A':
		GPIOA->ODR = (GPIOA->ODR & ~shifted_mask) ^ shifted_value;
 8001734:	491c      	ldr	r1, [pc, #112]	; (80017a8 <set_gpio_output+0xb8>)
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <set_gpio_output+0xb8>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	43d2      	mvns	r2, r2
 800173e:	401a      	ands	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4053      	eors	r3, r2
 8001744:	614b      	str	r3, [r1, #20]
		break;
 8001746:	e028      	b.n	800179a <set_gpio_output+0xaa>
	case 'B':
		GPIOB->ODR = (GPIOB->ODR & ~shifted_mask) ^ shifted_value;
 8001748:	4918      	ldr	r1, [pc, #96]	; (80017ac <set_gpio_output+0xbc>)
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <set_gpio_output+0xbc>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	43d2      	mvns	r2, r2
 8001752:	401a      	ands	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4053      	eors	r3, r2
 8001758:	614b      	str	r3, [r1, #20]
		break;
 800175a:	e01e      	b.n	800179a <set_gpio_output+0xaa>
	case 'C':
		GPIOC->ODR = (GPIOC->ODR & ~shifted_mask) ^ shifted_value;
 800175c:	4914      	ldr	r1, [pc, #80]	; (80017b0 <set_gpio_output+0xc0>)
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <set_gpio_output+0xc0>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	43d2      	mvns	r2, r2
 8001766:	401a      	ands	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4053      	eors	r3, r2
 800176c:	614b      	str	r3, [r1, #20]
		break;
 800176e:	e014      	b.n	800179a <set_gpio_output+0xaa>
	case 'D':
		GPIOD->ODR = (GPIOD->ODR & ~shifted_mask) ^ shifted_value;
 8001770:	4910      	ldr	r1, [pc, #64]	; (80017b4 <set_gpio_output+0xc4>)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <set_gpio_output+0xc4>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	43d2      	mvns	r2, r2
 800177a:	401a      	ands	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4053      	eors	r3, r2
 8001780:	614b      	str	r3, [r1, #20]
		break;
 8001782:	e00a      	b.n	800179a <set_gpio_output+0xaa>
	case 'E':
		GPIOE->ODR = (GPIOE->ODR & ~shifted_mask) ^ shifted_value;
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <set_gpio_output+0xc8>)
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <set_gpio_output+0xc8>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	43d2      	mvns	r2, r2
 800178e:	401a      	ands	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4053      	eors	r3, r2
 8001794:	614b      	str	r3, [r1, #20]
		break;
 8001796:	e000      	b.n	800179a <set_gpio_output+0xaa>
	default:
		break;
 8001798:	bf00      	nop
	}
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	40021000 	.word	0x40021000

080017bc <__libc_init_array>:
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	4e0d      	ldr	r6, [pc, #52]	; (80017f4 <__libc_init_array+0x38>)
 80017c0:	4c0d      	ldr	r4, [pc, #52]	; (80017f8 <__libc_init_array+0x3c>)
 80017c2:	1ba4      	subs	r4, r4, r6
 80017c4:	10a4      	asrs	r4, r4, #2
 80017c6:	2500      	movs	r5, #0
 80017c8:	42a5      	cmp	r5, r4
 80017ca:	d109      	bne.n	80017e0 <__libc_init_array+0x24>
 80017cc:	4e0b      	ldr	r6, [pc, #44]	; (80017fc <__libc_init_array+0x40>)
 80017ce:	4c0c      	ldr	r4, [pc, #48]	; (8001800 <__libc_init_array+0x44>)
 80017d0:	f000 f89e 	bl	8001910 <_init>
 80017d4:	1ba4      	subs	r4, r4, r6
 80017d6:	10a4      	asrs	r4, r4, #2
 80017d8:	2500      	movs	r5, #0
 80017da:	42a5      	cmp	r5, r4
 80017dc:	d105      	bne.n	80017ea <__libc_init_array+0x2e>
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017e4:	4798      	blx	r3
 80017e6:	3501      	adds	r5, #1
 80017e8:	e7ee      	b.n	80017c8 <__libc_init_array+0xc>
 80017ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017ee:	4798      	blx	r3
 80017f0:	3501      	adds	r5, #1
 80017f2:	e7f2      	b.n	80017da <__libc_init_array+0x1e>
 80017f4:	0800197c 	.word	0x0800197c
 80017f8:	0800197c 	.word	0x0800197c
 80017fc:	0800197c 	.word	0x0800197c
 8001800:	08001980 	.word	0x08001980

08001804 <malloc>:
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <malloc+0xc>)
 8001806:	4601      	mov	r1, r0
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	f000 b803 	b.w	8001814 <_malloc_r>
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <_malloc_r>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	1ccd      	adds	r5, r1, #3
 8001818:	f025 0503 	bic.w	r5, r5, #3
 800181c:	3508      	adds	r5, #8
 800181e:	2d0c      	cmp	r5, #12
 8001820:	bf38      	it	cc
 8001822:	250c      	movcc	r5, #12
 8001824:	2d00      	cmp	r5, #0
 8001826:	4606      	mov	r6, r0
 8001828:	db01      	blt.n	800182e <_malloc_r+0x1a>
 800182a:	42a9      	cmp	r1, r5
 800182c:	d903      	bls.n	8001836 <_malloc_r+0x22>
 800182e:	230c      	movs	r3, #12
 8001830:	6033      	str	r3, [r6, #0]
 8001832:	2000      	movs	r0, #0
 8001834:	bd70      	pop	{r4, r5, r6, pc}
 8001836:	f000 f85b 	bl	80018f0 <__malloc_lock>
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <_malloc_r+0xb4>)
 800183c:	6814      	ldr	r4, [r2, #0]
 800183e:	4621      	mov	r1, r4
 8001840:	b991      	cbnz	r1, 8001868 <_malloc_r+0x54>
 8001842:	4c22      	ldr	r4, [pc, #136]	; (80018cc <_malloc_r+0xb8>)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	b91b      	cbnz	r3, 8001850 <_malloc_r+0x3c>
 8001848:	4630      	mov	r0, r6
 800184a:	f000 f841 	bl	80018d0 <_sbrk_r>
 800184e:	6020      	str	r0, [r4, #0]
 8001850:	4629      	mov	r1, r5
 8001852:	4630      	mov	r0, r6
 8001854:	f000 f83c 	bl	80018d0 <_sbrk_r>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d126      	bne.n	80018aa <_malloc_r+0x96>
 800185c:	230c      	movs	r3, #12
 800185e:	6033      	str	r3, [r6, #0]
 8001860:	4630      	mov	r0, r6
 8001862:	f000 f846 	bl	80018f2 <__malloc_unlock>
 8001866:	e7e4      	b.n	8001832 <_malloc_r+0x1e>
 8001868:	680b      	ldr	r3, [r1, #0]
 800186a:	1b5b      	subs	r3, r3, r5
 800186c:	d41a      	bmi.n	80018a4 <_malloc_r+0x90>
 800186e:	2b0b      	cmp	r3, #11
 8001870:	d90f      	bls.n	8001892 <_malloc_r+0x7e>
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	50cd      	str	r5, [r1, r3]
 8001876:	18cc      	adds	r4, r1, r3
 8001878:	4630      	mov	r0, r6
 800187a:	f000 f83a 	bl	80018f2 <__malloc_unlock>
 800187e:	f104 000b 	add.w	r0, r4, #11
 8001882:	1d23      	adds	r3, r4, #4
 8001884:	f020 0007 	bic.w	r0, r0, #7
 8001888:	1ac3      	subs	r3, r0, r3
 800188a:	d01b      	beq.n	80018c4 <_malloc_r+0xb0>
 800188c:	425a      	negs	r2, r3
 800188e:	50e2      	str	r2, [r4, r3]
 8001890:	bd70      	pop	{r4, r5, r6, pc}
 8001892:	428c      	cmp	r4, r1
 8001894:	bf0d      	iteet	eq
 8001896:	6863      	ldreq	r3, [r4, #4]
 8001898:	684b      	ldrne	r3, [r1, #4]
 800189a:	6063      	strne	r3, [r4, #4]
 800189c:	6013      	streq	r3, [r2, #0]
 800189e:	bf18      	it	ne
 80018a0:	460c      	movne	r4, r1
 80018a2:	e7e9      	b.n	8001878 <_malloc_r+0x64>
 80018a4:	460c      	mov	r4, r1
 80018a6:	6849      	ldr	r1, [r1, #4]
 80018a8:	e7ca      	b.n	8001840 <_malloc_r+0x2c>
 80018aa:	1cc4      	adds	r4, r0, #3
 80018ac:	f024 0403 	bic.w	r4, r4, #3
 80018b0:	42a0      	cmp	r0, r4
 80018b2:	d005      	beq.n	80018c0 <_malloc_r+0xac>
 80018b4:	1a21      	subs	r1, r4, r0
 80018b6:	4630      	mov	r0, r6
 80018b8:	f000 f80a 	bl	80018d0 <_sbrk_r>
 80018bc:	3001      	adds	r0, #1
 80018be:	d0cd      	beq.n	800185c <_malloc_r+0x48>
 80018c0:	6025      	str	r5, [r4, #0]
 80018c2:	e7d9      	b.n	8001878 <_malloc_r+0x64>
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	bf00      	nop
 80018c8:	200000cc 	.word	0x200000cc
 80018cc:	200000d0 	.word	0x200000d0

080018d0 <_sbrk_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4c06      	ldr	r4, [pc, #24]	; (80018ec <_sbrk_r+0x1c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	4605      	mov	r5, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	f000 f80a 	bl	80018f4 <_sbrk>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_sbrk_r+0x1a>
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_sbrk_r+0x1a>
 80018e8:	602b      	str	r3, [r5, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	200000d8 	.word	0x200000d8

080018f0 <__malloc_lock>:
 80018f0:	4770      	bx	lr

080018f2 <__malloc_unlock>:
 80018f2:	4770      	bx	lr

080018f4 <_sbrk>:
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <_sbrk+0x14>)
 80018f6:	6819      	ldr	r1, [r3, #0]
 80018f8:	4602      	mov	r2, r0
 80018fa:	b909      	cbnz	r1, 8001900 <_sbrk+0xc>
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <_sbrk+0x18>)
 80018fe:	6019      	str	r1, [r3, #0]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	4402      	add	r2, r0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	4770      	bx	lr
 8001908:	200000d4 	.word	0x200000d4
 800190c:	200000dc 	.word	0x200000dc

08001910 <_init>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr

0800191c <_fini>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr
